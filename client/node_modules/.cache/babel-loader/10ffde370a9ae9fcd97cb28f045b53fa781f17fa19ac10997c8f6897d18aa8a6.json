{"ast":null,"code":"/*!\nFullCalendar v5.11.5\nDocs & License: https://fullcalendar.io/\n(c) 2022 Adam Shaw\n*/\nimport './main.css';\nimport { createRef, getStickyHeaderDates, createElement, ViewRoot, SimpleScrollGrid, getStickyFooterScrollbar, renderScrollShim, DateComponent, buildNavLinkAttrs, DayCellContent, Fragment, BaseComponent, createFormatter, StandardEvent, buildSegTimeText, EventRoot, getSegAnchorAttrs, memoize, MoreLinkRoot, getSegMeta, createAriaClickAttrs, getUniqueDomId, setRef, DayCellRoot, WeekNumberRoot, buildEntryKey, intersectSpans, SegHierarchy, intersectRanges, addDays, RefMap, sortEventSegs, isPropsEqual, buildEventRangeKey, BgEvent, renderFill, PositionCache, NowTimer, Slicer, DayHeader, DaySeriesModel, DayTableModel, addWeeks, diffWeeks, DateProfileGenerator, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign, __spreadArray } from 'tslib';\n\n/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a Table subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\nvar TableView = /** @class */function (_super) {\n  __extends(TableView, _super);\n  function TableView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.headerElRef = createRef();\n    return _this;\n  }\n  TableView.prototype.renderSimpleLayout = function (headerRowContent, bodyContent) {\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var sections = [];\n    var stickyHeaderDates = getStickyHeaderDates(context.options);\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }\n      });\n    }\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunk: {\n        content: bodyContent\n      }\n    });\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: ['fc-daygrid'].concat(classNames).join(' ')\n      }, createElement(SimpleScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: props.forPrint,\n        cols: [] /* TODO: make optional? */,\n        sections: sections\n      }));\n    });\n  };\n  TableView.prototype.renderHScrollLayout = function (headerRowContent, bodyContent, colCnt, dayMinWidth) {\n    var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation');\n    }\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options);\n    var stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options);\n    var sections = [];\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunks: [{\n          key: 'main',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }]\n      });\n    }\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunks: [{\n        key: 'main',\n        content: bodyContent\n      }]\n    });\n    if (stickyFooterScrollbar) {\n      sections.push({\n        type: 'footer',\n        key: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'main',\n          content: renderScrollShim\n        }]\n      });\n    }\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: ['fc-daygrid'].concat(classNames).join(' ')\n      }, createElement(ScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: props.forPrint,\n        colGroups: [{\n          cols: [{\n            span: colCnt,\n            minWidth: dayMinWidth\n          }]\n        }],\n        sections: sections\n      }));\n    });\n  };\n  return TableView;\n}(DateComponent);\nfunction splitSegsByRow(segs, rowCnt) {\n  var byRow = [];\n  for (var i = 0; i < rowCnt; i += 1) {\n    byRow[i] = [];\n  }\n  for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n    var seg = segs_1[_i];\n    byRow[seg.row].push(seg);\n  }\n  return byRow;\n}\nfunction splitSegsByFirstCol(segs, colCnt) {\n  var byCol = [];\n  for (var i = 0; i < colCnt; i += 1) {\n    byCol[i] = [];\n  }\n  for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n    var seg = segs_2[_i];\n    byCol[seg.firstCol].push(seg);\n  }\n  return byCol;\n}\nfunction splitInteractionByRow(ui, rowCnt) {\n  var byRow = [];\n  if (!ui) {\n    for (var i = 0; i < rowCnt; i += 1) {\n      byRow[i] = null;\n    }\n  } else {\n    for (var i = 0; i < rowCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: []\n      };\n    }\n    for (var _i = 0, _a = ui.segs; _i < _a.length; _i++) {\n      var seg = _a[_i];\n      byRow[seg.row].segs.push(seg);\n    }\n  }\n  return byRow;\n}\nvar TableCellTop = /** @class */function (_super) {\n  __extends(TableCellTop, _super);\n  function TableCellTop() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableCellTop.prototype.render = function () {\n    var props = this.props;\n    var navLinkAttrs = buildNavLinkAttrs(this.context, props.date);\n    return createElement(DayCellContent, {\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      showDayNumber: props.showDayNumber,\n      extraHookProps: props.extraHookProps,\n      defaultContent: renderTopInner\n    }, function (innerElRef, innerContent) {\n      return (innerContent || props.forceDayTop) && createElement(\"div\", {\n        className: \"fc-daygrid-day-top\",\n        ref: innerElRef\n      }, createElement(\"a\", __assign({\n        id: props.dayNumberId,\n        className: \"fc-daygrid-day-number\"\n      }, navLinkAttrs), innerContent || createElement(Fragment, null, \"\\u00A0\")));\n    });\n  };\n  return TableCellTop;\n}(BaseComponent);\nfunction renderTopInner(props) {\n  return props.dayNumberText;\n}\nvar DEFAULT_TABLE_EVENT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'narrow'\n});\nfunction hasListItemDisplay(seg) {\n  var display = seg.eventRange.ui.display;\n  return display === 'list-item' || display === 'auto' && !seg.eventRange.def.allDay && seg.firstCol === seg.lastCol &&\n  // can't be multi-day\n  seg.isStart &&\n  // \"\n  seg.isEnd // \"\n  ;\n}\nvar TableBlockEvent = /** @class */function (_super) {\n  __extends(TableBlockEvent, _super);\n  function TableBlockEvent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableBlockEvent.prototype.render = function () {\n    var props = this.props;\n    return createElement(StandardEvent, __assign({}, props, {\n      extraClassNames: ['fc-daygrid-event', 'fc-daygrid-block-event', 'fc-h-event'],\n      defaultTimeFormat: DEFAULT_TABLE_EVENT_TIME_FORMAT,\n      defaultDisplayEventEnd: props.defaultDisplayEventEnd,\n      disableResizing: !props.seg.eventRange.def.allDay\n    }));\n  };\n  return TableBlockEvent;\n}(BaseComponent);\nvar TableListItemEvent = /** @class */function (_super) {\n  __extends(TableListItemEvent, _super);\n  function TableListItemEvent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableListItemEvent.prototype.render = function () {\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var timeFormat = context.options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT;\n    var timeText = buildSegTimeText(props.seg, timeFormat, context, true, props.defaultDisplayEventEnd);\n    return createElement(EventRoot, {\n      seg: props.seg,\n      timeText: timeText,\n      defaultContent: renderInnerContent,\n      isDragging: props.isDragging,\n      isResizing: false,\n      isDateSelecting: false,\n      isSelected: props.isSelected,\n      isPast: props.isPast,\n      isFuture: props.isFuture,\n      isToday: props.isToday\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return (\n        // we don't use styles!\n        createElement(\"a\", __assign({\n          className: ['fc-daygrid-event', 'fc-daygrid-dot-event'].concat(classNames).join(' '),\n          ref: rootElRef\n        }, getSegAnchorAttrs(props.seg, context)), innerContent)\n      );\n    });\n  };\n  return TableListItemEvent;\n}(BaseComponent);\nfunction renderInnerContent(innerProps) {\n  return createElement(Fragment, null, createElement(\"div\", {\n    className: \"fc-daygrid-event-dot\",\n    style: {\n      borderColor: innerProps.borderColor || innerProps.backgroundColor\n    }\n  }), innerProps.timeText && createElement(\"div\", {\n    className: \"fc-event-time\"\n  }, innerProps.timeText), createElement(\"div\", {\n    className: \"fc-event-title\"\n  }, innerProps.event.title || createElement(Fragment, null, \"\\u00A0\")));\n}\nvar TableCellMoreLink = /** @class */function (_super) {\n  __extends(TableCellMoreLink, _super);\n  function TableCellMoreLink() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.compileSegs = memoize(compileSegs);\n    return _this;\n  }\n  TableCellMoreLink.prototype.render = function () {\n    var props = this.props;\n    var _a = this.compileSegs(props.singlePlacements),\n      allSegs = _a.allSegs,\n      invisibleSegs = _a.invisibleSegs;\n    return createElement(MoreLinkRoot, {\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      allDayDate: props.allDayDate,\n      moreCnt: props.moreCnt,\n      allSegs: allSegs,\n      hiddenSegs: invisibleSegs,\n      alignmentElRef: props.alignmentElRef,\n      alignGridTop: props.alignGridTop,\n      extraDateSpan: props.extraDateSpan,\n      popoverContent: function () {\n        var isForcedInvisible = (props.eventDrag ? props.eventDrag.affectedInstances : null) || (props.eventResize ? props.eventResize.affectedInstances : null) || {};\n        return createElement(Fragment, null, allSegs.map(function (seg) {\n          var instanceId = seg.eventRange.instance.instanceId;\n          return createElement(\"div\", {\n            className: \"fc-daygrid-event-harness\",\n            key: instanceId,\n            style: {\n              visibility: isForcedInvisible[instanceId] ? 'hidden' : ''\n            }\n          }, hasListItemDisplay(seg) ? createElement(TableListItemEvent, __assign({\n            seg: seg,\n            isDragging: false,\n            isSelected: instanceId === props.eventSelection,\n            defaultDisplayEventEnd: false\n          }, getSegMeta(seg, props.todayRange))) : createElement(TableBlockEvent, __assign({\n            seg: seg,\n            isDragging: false,\n            isResizing: false,\n            isDateSelecting: false,\n            isSelected: instanceId === props.eventSelection,\n            defaultDisplayEventEnd: false\n          }, getSegMeta(seg, props.todayRange))));\n        }));\n      }\n    }, function (rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) {\n      return createElement(\"a\", __assign({\n        ref: rootElRef,\n        className: ['fc-daygrid-more-link'].concat(classNames).join(' '),\n        title: title,\n        \"aria-expanded\": isExpanded,\n        \"aria-controls\": popoverId\n      }, createAriaClickAttrs(handleClick)), innerContent);\n    });\n  };\n  return TableCellMoreLink;\n}(BaseComponent);\nfunction compileSegs(singlePlacements) {\n  var allSegs = [];\n  var invisibleSegs = [];\n  for (var _i = 0, singlePlacements_1 = singlePlacements; _i < singlePlacements_1.length; _i++) {\n    var placement = singlePlacements_1[_i];\n    allSegs.push(placement.seg);\n    if (!placement.isVisible) {\n      invisibleSegs.push(placement.seg);\n    }\n  }\n  return {\n    allSegs: allSegs,\n    invisibleSegs: invisibleSegs\n  };\n}\nvar DEFAULT_WEEK_NUM_FORMAT = createFormatter({\n  week: 'narrow'\n});\nvar TableCell = /** @class */function (_super) {\n  __extends(TableCell, _super);\n  function TableCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.rootElRef = createRef();\n    _this.state = {\n      dayNumberId: getUniqueDomId()\n    };\n    _this.handleRootEl = function (el) {\n      setRef(_this.rootElRef, el);\n      setRef(_this.props.elRef, el);\n    };\n    return _this;\n  }\n  TableCell.prototype.render = function () {\n    var _a = this,\n      context = _a.context,\n      props = _a.props,\n      state = _a.state,\n      rootElRef = _a.rootElRef;\n    var date = props.date,\n      dateProfile = props.dateProfile;\n    var navLinkAttrs = buildNavLinkAttrs(context, date, 'week');\n    return createElement(DayCellRoot, {\n      date: date,\n      dateProfile: dateProfile,\n      todayRange: props.todayRange,\n      showDayNumber: props.showDayNumber,\n      extraHookProps: props.extraHookProps,\n      elRef: this.handleRootEl\n    }, function (dayElRef, dayClassNames, rootDataAttrs, isDisabled) {\n      return createElement(\"td\", __assign({\n        ref: dayElRef,\n        role: \"gridcell\",\n        className: ['fc-daygrid-day'].concat(dayClassNames, props.extraClassNames || []).join(' ')\n      }, rootDataAttrs, props.extraDataAttrs, props.showDayNumber ? {\n        'aria-labelledby': state.dayNumberId\n      } : {}), createElement(\"div\", {\n        className: \"fc-daygrid-day-frame fc-scrollgrid-sync-inner\",\n        ref: props.innerElRef /* different from hook system! RENAME */\n      }, props.showWeekNumber && createElement(WeekNumberRoot, {\n        date: date,\n        defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n      }, function (weekElRef, weekClassNames, innerElRef, innerContent) {\n        return createElement(\"a\", __assign({\n          ref: weekElRef,\n          className: ['fc-daygrid-week-number'].concat(weekClassNames).join(' ')\n        }, navLinkAttrs), innerContent);\n      }), !isDisabled && createElement(TableCellTop, {\n        date: date,\n        dateProfile: dateProfile,\n        showDayNumber: props.showDayNumber,\n        dayNumberId: state.dayNumberId,\n        forceDayTop: props.forceDayTop,\n        todayRange: props.todayRange,\n        extraHookProps: props.extraHookProps\n      }), createElement(\"div\", {\n        className: \"fc-daygrid-day-events\",\n        ref: props.fgContentElRef\n      }, props.fgContent, createElement(\"div\", {\n        className: \"fc-daygrid-day-bottom\",\n        style: {\n          marginTop: props.moreMarginTop\n        }\n      }, createElement(TableCellMoreLink, {\n        allDayDate: date,\n        singlePlacements: props.singlePlacements,\n        moreCnt: props.moreCnt,\n        alignmentElRef: rootElRef,\n        alignGridTop: !props.showDayNumber,\n        extraDateSpan: props.extraDateSpan,\n        dateProfile: props.dateProfile,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        todayRange: props.todayRange\n      }))), createElement(\"div\", {\n        className: \"fc-daygrid-day-bg\"\n      }, props.bgContent)));\n    });\n  };\n  return TableCell;\n}(DateComponent);\nfunction computeFgSegPlacement(segs,\n// assumed already sorted\ndayMaxEvents, dayMaxEventRows, strictOrder, eventInstanceHeights, maxContentHeight, cells) {\n  var hierarchy = new DayGridSegHierarchy();\n  hierarchy.allowReslicing = true;\n  hierarchy.strictOrder = strictOrder;\n  if (dayMaxEvents === true || dayMaxEventRows === true) {\n    hierarchy.maxCoord = maxContentHeight;\n    hierarchy.hiddenConsumes = true;\n  } else if (typeof dayMaxEvents === 'number') {\n    hierarchy.maxStackCnt = dayMaxEvents;\n  } else if (typeof dayMaxEventRows === 'number') {\n    hierarchy.maxStackCnt = dayMaxEventRows;\n    hierarchy.hiddenConsumes = true;\n  }\n  // create segInputs only for segs with known heights\n  var segInputs = [];\n  var unknownHeightSegs = [];\n  for (var i = 0; i < segs.length; i += 1) {\n    var seg = segs[i];\n    var instanceId = seg.eventRange.instance.instanceId;\n    var eventHeight = eventInstanceHeights[instanceId];\n    if (eventHeight != null) {\n      segInputs.push({\n        index: i,\n        thickness: eventHeight,\n        span: {\n          start: seg.firstCol,\n          end: seg.lastCol + 1\n        }\n      });\n    } else {\n      unknownHeightSegs.push(seg);\n    }\n  }\n  var hiddenEntries = hierarchy.addSegs(segInputs);\n  var segRects = hierarchy.toRects();\n  var _a = placeRects(segRects, segs, cells),\n    singleColPlacements = _a.singleColPlacements,\n    multiColPlacements = _a.multiColPlacements,\n    leftoverMargins = _a.leftoverMargins;\n  var moreCnts = [];\n  var moreMarginTops = [];\n  // add segs with unknown heights\n  for (var _i = 0, unknownHeightSegs_1 = unknownHeightSegs; _i < unknownHeightSegs_1.length; _i++) {\n    var seg = unknownHeightSegs_1[_i];\n    multiColPlacements[seg.firstCol].push({\n      seg: seg,\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0\n    });\n    for (var col = seg.firstCol; col <= seg.lastCol; col += 1) {\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0\n      });\n    }\n  }\n  // add the hidden entries\n  for (var col = 0; col < cells.length; col += 1) {\n    moreCnts.push(0);\n  }\n  for (var _b = 0, hiddenEntries_1 = hiddenEntries; _b < hiddenEntries_1.length; _b++) {\n    var hiddenEntry = hiddenEntries_1[_b];\n    var seg = segs[hiddenEntry.index];\n    var hiddenSpan = hiddenEntry.span;\n    multiColPlacements[hiddenSpan.start].push({\n      seg: resliceSeg(seg, hiddenSpan.start, hiddenSpan.end, cells),\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0\n    });\n    for (var col = hiddenSpan.start; col < hiddenSpan.end; col += 1) {\n      moreCnts[col] += 1;\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0\n      });\n    }\n  }\n  // deal with leftover margins\n  for (var col = 0; col < cells.length; col += 1) {\n    moreMarginTops.push(leftoverMargins[col]);\n  }\n  return {\n    singleColPlacements: singleColPlacements,\n    multiColPlacements: multiColPlacements,\n    moreCnts: moreCnts,\n    moreMarginTops: moreMarginTops\n  };\n}\n// rects ordered by top coord, then left\nfunction placeRects(allRects, segs, cells) {\n  var rectsByEachCol = groupRectsByEachCol(allRects, cells.length);\n  var singleColPlacements = [];\n  var multiColPlacements = [];\n  var leftoverMargins = [];\n  for (var col = 0; col < cells.length; col += 1) {\n    var rects = rectsByEachCol[col];\n    // compute all static segs in singlePlacements\n    var singlePlacements = [];\n    var currentHeight = 0;\n    var currentMarginTop = 0;\n    for (var _i = 0, rects_1 = rects; _i < rects_1.length; _i++) {\n      var rect = rects_1[_i];\n      var seg = segs[rect.index];\n      singlePlacements.push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: true,\n        isAbsolute: false,\n        absoluteTop: rect.levelCoord,\n        marginTop: rect.levelCoord - currentHeight\n      });\n      currentHeight = rect.levelCoord + rect.thickness;\n    }\n    // compute mixed static/absolute segs in multiPlacements\n    var multiPlacements = [];\n    currentHeight = 0;\n    currentMarginTop = 0;\n    for (var _a = 0, rects_2 = rects; _a < rects_2.length; _a++) {\n      var rect = rects_2[_a];\n      var seg = segs[rect.index];\n      var isAbsolute = rect.span.end - rect.span.start > 1; // multi-column?\n      var isFirstCol = rect.span.start === col;\n      currentMarginTop += rect.levelCoord - currentHeight; // amount of space since bottom of previous seg\n      currentHeight = rect.levelCoord + rect.thickness; // height will now be bottom of current seg\n      if (isAbsolute) {\n        currentMarginTop += rect.thickness;\n        if (isFirstCol) {\n          multiPlacements.push({\n            seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n            isVisible: true,\n            isAbsolute: true,\n            absoluteTop: rect.levelCoord,\n            marginTop: 0\n          });\n        }\n      } else if (isFirstCol) {\n        multiPlacements.push({\n          seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n          isVisible: true,\n          isAbsolute: false,\n          absoluteTop: rect.levelCoord,\n          marginTop: currentMarginTop // claim the margin\n        });\n        currentMarginTop = 0;\n      }\n    }\n    singleColPlacements.push(singlePlacements);\n    multiColPlacements.push(multiPlacements);\n    leftoverMargins.push(currentMarginTop);\n  }\n  return {\n    singleColPlacements: singleColPlacements,\n    multiColPlacements: multiColPlacements,\n    leftoverMargins: leftoverMargins\n  };\n}\nfunction groupRectsByEachCol(rects, colCnt) {\n  var rectsByEachCol = [];\n  for (var col = 0; col < colCnt; col += 1) {\n    rectsByEachCol.push([]);\n  }\n  for (var _i = 0, rects_3 = rects; _i < rects_3.length; _i++) {\n    var rect = rects_3[_i];\n    for (var col = rect.span.start; col < rect.span.end; col += 1) {\n      rectsByEachCol[col].push(rect);\n    }\n  }\n  return rectsByEachCol;\n}\nfunction resliceSeg(seg, spanStart, spanEnd, cells) {\n  if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) {\n    return seg;\n  }\n  var eventRange = seg.eventRange;\n  var origRange = eventRange.range;\n  var slicedRange = intersectRanges(origRange, {\n    start: cells[spanStart].date,\n    end: addDays(cells[spanEnd - 1].date, 1)\n  });\n  return __assign(__assign({}, seg), {\n    firstCol: spanStart,\n    lastCol: spanEnd - 1,\n    eventRange: {\n      def: eventRange.def,\n      ui: __assign(__assign({}, eventRange.ui), {\n        durationEditable: false\n      }),\n      instance: eventRange.instance,\n      range: slicedRange\n    },\n    isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),\n    isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf()\n  });\n}\nvar DayGridSegHierarchy = /** @class */function (_super) {\n  __extends(DayGridSegHierarchy, _super);\n  function DayGridSegHierarchy() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    // config\n    _this.hiddenConsumes = false;\n    // allows us to keep hidden entries in the hierarchy so they take up space\n    _this.forceHidden = {};\n    return _this;\n  }\n  DayGridSegHierarchy.prototype.addSegs = function (segInputs) {\n    var _this = this;\n    var hiddenSegs = _super.prototype.addSegs.call(this, segInputs);\n    var entriesByLevel = this.entriesByLevel;\n    var excludeHidden = function (entry) {\n      return !_this.forceHidden[buildEntryKey(entry)];\n    };\n    // remove the forced-hidden segs\n    for (var level = 0; level < entriesByLevel.length; level += 1) {\n      entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden);\n    }\n    return hiddenSegs;\n  };\n  DayGridSegHierarchy.prototype.handleInvalidInsertion = function (insertion, entry, hiddenEntries) {\n    var _a = this,\n      entriesByLevel = _a.entriesByLevel,\n      forceHidden = _a.forceHidden;\n    var touchingEntry = insertion.touchingEntry,\n      touchingLevel = insertion.touchingLevel,\n      touchingLateral = insertion.touchingLateral;\n    if (this.hiddenConsumes && touchingEntry) {\n      var touchingEntryId = buildEntryKey(touchingEntry);\n      // if not already hidden\n      if (!forceHidden[touchingEntryId]) {\n        if (this.allowReslicing) {\n          var placeholderEntry = __assign(__assign({}, touchingEntry), {\n            span: intersectSpans(touchingEntry.span, entry.span)\n          });\n          var placeholderEntryId = buildEntryKey(placeholderEntry);\n          forceHidden[placeholderEntryId] = true;\n          entriesByLevel[touchingLevel][touchingLateral] = placeholderEntry; // replace touchingEntry with our placeholder\n          this.splitEntry(touchingEntry, entry, hiddenEntries); // split up the touchingEntry, reinsert it\n        } else {\n          forceHidden[touchingEntryId] = true;\n          hiddenEntries.push(touchingEntry);\n        }\n      }\n    }\n    return _super.prototype.handleInvalidInsertion.call(this, insertion, entry, hiddenEntries);\n  };\n  return DayGridSegHierarchy;\n}(SegHierarchy);\nvar TableRow = /** @class */function (_super) {\n  __extends(TableRow, _super);\n  function TableRow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.cellElRefs = new RefMap(); // the <td>\n    _this.frameElRefs = new RefMap(); // the fc-daygrid-day-frame\n    _this.fgElRefs = new RefMap(); // the fc-daygrid-day-events\n    _this.segHarnessRefs = new RefMap(); // indexed by \"instanceId:firstCol\"\n    _this.rootElRef = createRef();\n    _this.state = {\n      framePositions: null,\n      maxContentHeight: null,\n      eventInstanceHeights: {}\n    };\n    return _this;\n  }\n  TableRow.prototype.render = function () {\n    var _this = this;\n    var _a = this,\n      props = _a.props,\n      state = _a.state,\n      context = _a.context;\n    var options = context.options;\n    var colCnt = props.cells.length;\n    var businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt);\n    var bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt);\n    var highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt);\n    var mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt);\n    var _b = computeFgSegPlacement(sortEventSegs(props.fgEventSegs, options.eventOrder), props.dayMaxEvents, props.dayMaxEventRows, options.eventOrderStrict, state.eventInstanceHeights, state.maxContentHeight, props.cells),\n      singleColPlacements = _b.singleColPlacements,\n      multiColPlacements = _b.multiColPlacements,\n      moreCnts = _b.moreCnts,\n      moreMarginTops = _b.moreMarginTops;\n    var isForcedInvisible =\n    // TODO: messy way to compute this\n    props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n    return createElement(\"tr\", {\n      ref: this.rootElRef,\n      role: \"row\"\n    }, props.renderIntro && props.renderIntro(), props.cells.map(function (cell, col) {\n      var normalFgNodes = _this.renderFgSegs(col, props.forPrint ? singleColPlacements[col] : multiColPlacements[col], props.todayRange, isForcedInvisible);\n      var mirrorFgNodes = _this.renderFgSegs(col, buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements), props.todayRange, {}, Boolean(props.eventDrag), Boolean(props.eventResize), false);\n      return createElement(TableCell, {\n        key: cell.key,\n        elRef: _this.cellElRefs.createRef(cell.key),\n        innerElRef: _this.frameElRefs.createRef(cell.key) /* FF <td> problem, but okay to use for left/right. TODO: rename prop */,\n        dateProfile: props.dateProfile,\n        date: cell.date,\n        showDayNumber: props.showDayNumbers,\n        showWeekNumber: props.showWeekNumbers && col === 0,\n        forceDayTop: props.showWeekNumbers /* even displaying weeknum for row, not necessarily day */,\n        todayRange: props.todayRange,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        extraHookProps: cell.extraHookProps,\n        extraDataAttrs: cell.extraDataAttrs,\n        extraClassNames: cell.extraClassNames,\n        extraDateSpan: cell.extraDateSpan,\n        moreCnt: moreCnts[col],\n        moreMarginTop: moreMarginTops[col],\n        singlePlacements: singleColPlacements[col],\n        fgContentElRef: _this.fgElRefs.createRef(cell.key),\n        fgContent:\n        // Fragment scopes the keys\n        createElement(Fragment, null, createElement(Fragment, null, normalFgNodes), createElement(Fragment, null, mirrorFgNodes)),\n        bgContent:\n        // Fragment scopes the keys\n        createElement(Fragment, null, _this.renderFillSegs(highlightSegsByCol[col], 'highlight'), _this.renderFillSegs(businessHoursByCol[col], 'non-business'), _this.renderFillSegs(bgEventSegsByCol[col], 'bg-event'))\n      });\n    }));\n  };\n  TableRow.prototype.componentDidMount = function () {\n    this.updateSizing(true);\n  };\n  TableRow.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var currentProps = this.props;\n    this.updateSizing(!isPropsEqual(prevProps, currentProps));\n  };\n  TableRow.prototype.getHighlightSegs = function () {\n    var props = this.props;\n    if (props.eventDrag && props.eventDrag.segs.length) {\n      // messy check\n      return props.eventDrag.segs;\n    }\n    if (props.eventResize && props.eventResize.segs.length) {\n      // messy check\n      return props.eventResize.segs;\n    }\n    return props.dateSelectionSegs;\n  };\n  TableRow.prototype.getMirrorSegs = function () {\n    var props = this.props;\n    if (props.eventResize && props.eventResize.segs.length) {\n      // messy check\n      return props.eventResize.segs;\n    }\n    return [];\n  };\n  TableRow.prototype.renderFgSegs = function (col, segPlacements, todayRange, isForcedInvisible, isDragging, isResizing, isDateSelecting) {\n    var context = this.context;\n    var eventSelection = this.props.eventSelection;\n    var framePositions = this.state.framePositions;\n    var defaultDisplayEventEnd = this.props.cells.length === 1; // colCnt === 1\n    var isMirror = isDragging || isResizing || isDateSelecting;\n    var nodes = [];\n    if (framePositions) {\n      for (var _i = 0, segPlacements_1 = segPlacements; _i < segPlacements_1.length; _i++) {\n        var placement = segPlacements_1[_i];\n        var seg = placement.seg;\n        var instanceId = seg.eventRange.instance.instanceId;\n        var key = instanceId + ':' + col;\n        var isVisible = placement.isVisible && !isForcedInvisible[instanceId];\n        var isAbsolute = placement.isAbsolute;\n        var left = '';\n        var right = '';\n        if (isAbsolute) {\n          if (context.isRtl) {\n            right = 0;\n            left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol];\n          } else {\n            left = 0;\n            right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol];\n          }\n        }\n        /*\n        known bug: events that are force to be list-item but span multiple days still take up space in later columns\n        todo: in print view, for multi-day events, don't display title within non-start/end segs\n        */\n        nodes.push(createElement(\"div\", {\n          className: 'fc-daygrid-event-harness' + (isAbsolute ? ' fc-daygrid-event-harness-abs' : ''),\n          key: key,\n          ref: isMirror ? null : this.segHarnessRefs.createRef(key),\n          style: {\n            visibility: isVisible ? '' : 'hidden',\n            marginTop: isAbsolute ? '' : placement.marginTop,\n            top: isAbsolute ? placement.absoluteTop : '',\n            left: left,\n            right: right\n          }\n        }, hasListItemDisplay(seg) ? createElement(TableListItemEvent, __assign({\n          seg: seg,\n          isDragging: isDragging,\n          isSelected: instanceId === eventSelection,\n          defaultDisplayEventEnd: defaultDisplayEventEnd\n        }, getSegMeta(seg, todayRange))) : createElement(TableBlockEvent, __assign({\n          seg: seg,\n          isDragging: isDragging,\n          isResizing: isResizing,\n          isDateSelecting: isDateSelecting,\n          isSelected: instanceId === eventSelection,\n          defaultDisplayEventEnd: defaultDisplayEventEnd\n        }, getSegMeta(seg, todayRange)))));\n      }\n    }\n    return nodes;\n  };\n  TableRow.prototype.renderFillSegs = function (segs, fillType) {\n    var isRtl = this.context.isRtl;\n    var todayRange = this.props.todayRange;\n    var framePositions = this.state.framePositions;\n    var nodes = [];\n    if (framePositions) {\n      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n        var seg = segs_1[_i];\n        var leftRightCss = isRtl ? {\n          right: 0,\n          left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]\n        } : {\n          left: 0,\n          right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]\n        };\n        nodes.push(createElement(\"div\", {\n          key: buildEventRangeKey(seg.eventRange),\n          className: \"fc-daygrid-bg-harness\",\n          style: leftRightCss\n        }, fillType === 'bg-event' ? createElement(BgEvent, __assign({\n          seg: seg\n        }, getSegMeta(seg, todayRange))) : renderFill(fillType)));\n      }\n    }\n    return createElement.apply(void 0, __spreadArray([Fragment, {}], nodes));\n  };\n  TableRow.prototype.updateSizing = function (isExternalSizingChange) {\n    var _a = this,\n      props = _a.props,\n      frameElRefs = _a.frameElRefs;\n    if (!props.forPrint && props.clientWidth !== null // positioning ready?\n    ) {\n      if (isExternalSizingChange) {\n        var frameEls = props.cells.map(function (cell) {\n          return frameElRefs.currentMap[cell.key];\n        });\n        if (frameEls.length) {\n          var originEl = this.rootElRef.current;\n          this.setState({\n            framePositions: new PositionCache(originEl, frameEls, true,\n            // isHorizontal\n            false)\n          });\n        }\n      }\n      var oldInstanceHeights = this.state.eventInstanceHeights;\n      var newInstanceHeights = this.queryEventInstanceHeights();\n      var limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true;\n      this.safeSetState({\n        // HACK to prevent oscillations of events being shown/hidden from max-event-rows\n        // Essentially, once you compute an element's height, never null-out.\n        // TODO: always display all events, as visibility:hidden?\n        eventInstanceHeights: __assign(__assign({}, oldInstanceHeights), newInstanceHeights),\n        maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null\n      });\n    }\n  };\n  TableRow.prototype.queryEventInstanceHeights = function () {\n    var segElMap = this.segHarnessRefs.currentMap;\n    var eventInstanceHeights = {};\n    // get the max height amongst instance segs\n    for (var key in segElMap) {\n      var height = Math.round(segElMap[key].getBoundingClientRect().height);\n      var instanceId = key.split(':')[0]; // deconstruct how renderFgSegs makes the key\n      eventInstanceHeights[instanceId] = Math.max(eventInstanceHeights[instanceId] || 0, height);\n    }\n    return eventInstanceHeights;\n  };\n  TableRow.prototype.computeMaxContentHeight = function () {\n    var firstKey = this.props.cells[0].key;\n    var cellEl = this.cellElRefs.currentMap[firstKey];\n    var fcContainerEl = this.fgElRefs.currentMap[firstKey];\n    return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top;\n  };\n  TableRow.prototype.getCellEls = function () {\n    var elMap = this.cellElRefs.currentMap;\n    return this.props.cells.map(function (cell) {\n      return elMap[cell.key];\n    });\n  };\n  return TableRow;\n}(DateComponent);\nTableRow.addStateEquality({\n  eventInstanceHeights: isPropsEqual\n});\nfunction buildMirrorPlacements(mirrorSegs, colPlacements) {\n  if (!mirrorSegs.length) {\n    return [];\n  }\n  var topsByInstanceId = buildAbsoluteTopHash(colPlacements); // TODO: cache this at first render?\n  return mirrorSegs.map(function (seg) {\n    return {\n      seg: seg,\n      isVisible: true,\n      isAbsolute: true,\n      absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],\n      marginTop: 0\n    };\n  });\n}\nfunction buildAbsoluteTopHash(colPlacements) {\n  var topsByInstanceId = {};\n  for (var _i = 0, colPlacements_1 = colPlacements; _i < colPlacements_1.length; _i++) {\n    var placements = colPlacements_1[_i];\n    for (var _a = 0, placements_1 = placements; _a < placements_1.length; _a++) {\n      var placement = placements_1[_a];\n      topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop;\n    }\n  }\n  return topsByInstanceId;\n}\nvar Table = /** @class */function (_super) {\n  __extends(Table, _super);\n  function Table() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.splitBusinessHourSegs = memoize(splitSegsByRow);\n    _this.splitBgEventSegs = memoize(splitSegsByRow);\n    _this.splitFgEventSegs = memoize(splitSegsByRow);\n    _this.splitDateSelectionSegs = memoize(splitSegsByRow);\n    _this.splitEventDrag = memoize(splitInteractionByRow);\n    _this.splitEventResize = memoize(splitInteractionByRow);\n    _this.rowRefs = new RefMap();\n    _this.handleRootEl = function (rootEl) {\n      _this.rootEl = rootEl;\n      if (rootEl) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: rootEl,\n          isHitComboAllowed: _this.props.isHitComboAllowed\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n    return _this;\n  }\n  Table.prototype.render = function () {\n    var _this = this;\n    var props = this.props;\n    var dateProfile = props.dateProfile,\n      dayMaxEventRows = props.dayMaxEventRows,\n      dayMaxEvents = props.dayMaxEvents,\n      expandRows = props.expandRows;\n    var rowCnt = props.cells.length;\n    var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt);\n    var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt);\n    var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt);\n    var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt);\n    var eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt);\n    var eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt);\n    var limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true;\n    // if rows can't expand to fill fixed height, can't do balanced-height event limit\n    // TODO: best place to normalize these options?\n    if (limitViaBalanced && !expandRows) {\n      limitViaBalanced = false;\n      dayMaxEventRows = null;\n      dayMaxEvents = null;\n    }\n    var classNames = ['fc-daygrid-body', limitViaBalanced ? 'fc-daygrid-body-balanced' : 'fc-daygrid-body-unbalanced', expandRows ? '' : 'fc-daygrid-body-natural' // will height of one row depend on the others?\n    ];\n    return createElement(\"div\", {\n      className: classNames.join(' '),\n      ref: this.handleRootEl,\n      style: {\n        // these props are important to give this wrapper correct dimensions for interactions\n        // TODO: if we set it here, can we avoid giving to inner tables?\n        width: props.clientWidth,\n        minWidth: props.tableMinWidth\n      }\n    }, createElement(NowTimer, {\n      unit: \"day\"\n    }, function (nowDate, todayRange) {\n      return createElement(Fragment, null, createElement(\"table\", {\n        role: \"presentation\",\n        className: \"fc-scrollgrid-sync-table\",\n        style: {\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n          height: expandRows ? props.clientHeight : ''\n        }\n      }, props.colGroupNode, createElement(\"tbody\", {\n        role: \"presentation\"\n      }, props.cells.map(function (cells, row) {\n        return createElement(TableRow, {\n          ref: _this.rowRefs.createRef(row),\n          key: cells.length ? cells[0].date.toISOString() /* best? or put key on cell? or use diff formatter? */ : row // in case there are no cells (like when resource view is loading)\n          ,\n          showDayNumbers: rowCnt > 1,\n          showWeekNumbers: props.showWeekNumbers,\n          todayRange: todayRange,\n          dateProfile: dateProfile,\n          cells: cells,\n          renderIntro: props.renderRowIntro,\n          businessHourSegs: businessHourSegsByRow[row],\n          eventSelection: props.eventSelection,\n          bgEventSegs: bgEventSegsByRow[row].filter(isSegAllDay) /* hack */,\n          fgEventSegs: fgEventSegsByRow[row],\n          dateSelectionSegs: dateSelectionSegsByRow[row],\n          eventDrag: eventDragByRow[row],\n          eventResize: eventResizeByRow[row],\n          dayMaxEvents: dayMaxEvents,\n          dayMaxEventRows: dayMaxEventRows,\n          clientWidth: props.clientWidth,\n          clientHeight: props.clientHeight,\n          forPrint: props.forPrint\n        });\n      }))));\n    }));\n  };\n  // Hit System\n  // ----------------------------------------------------------------------------------------------------\n  Table.prototype.prepareHits = function () {\n    this.rowPositions = new PositionCache(this.rootEl, this.rowRefs.collect().map(function (rowObj) {\n      return rowObj.getCellEls()[0];\n    }),\n    // first cell el in each row. TODO: not optimal\n    false, true);\n    this.colPositions = new PositionCache(this.rootEl, this.rowRefs.currentMap[0].getCellEls(),\n    // cell els in first row\n    true,\n    // horizontal\n    false);\n  };\n  Table.prototype.queryHit = function (positionLeft, positionTop) {\n    var _a = this,\n      colPositions = _a.colPositions,\n      rowPositions = _a.rowPositions;\n    var col = colPositions.leftToIndex(positionLeft);\n    var row = rowPositions.topToIndex(positionTop);\n    if (row != null && col != null) {\n      var cell = this.props.cells[row][col];\n      return {\n        dateProfile: this.props.dateProfile,\n        dateSpan: __assign({\n          range: this.getCellRange(row, col),\n          allDay: true\n        }, cell.extraDateSpan),\n        dayEl: this.getCellEl(row, col),\n        rect: {\n          left: colPositions.lefts[col],\n          right: colPositions.rights[col],\n          top: rowPositions.tops[row],\n          bottom: rowPositions.bottoms[row]\n        },\n        layer: 0\n      };\n    }\n    return null;\n  };\n  Table.prototype.getCellEl = function (row, col) {\n    return this.rowRefs.currentMap[row].getCellEls()[col]; // TODO: not optimal\n  };\n  Table.prototype.getCellRange = function (row, col) {\n    var start = this.props.cells[row][col].date;\n    var end = addDays(start, 1);\n    return {\n      start: start,\n      end: end\n    };\n  };\n  return Table;\n}(DateComponent);\nfunction isSegAllDay(seg) {\n  return seg.eventRange.def.allDay;\n}\nvar DayTableSlicer = /** @class */function (_super) {\n  __extends(DayTableSlicer, _super);\n  function DayTableSlicer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.forceDayIfListItem = true;\n    return _this;\n  }\n  DayTableSlicer.prototype.sliceRange = function (dateRange, dayTableModel) {\n    return dayTableModel.sliceRange(dateRange);\n  };\n  return DayTableSlicer;\n}(Slicer);\nvar DayTable = /** @class */function (_super) {\n  __extends(DayTable, _super);\n  function DayTable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.slicer = new DayTableSlicer();\n    _this.tableRef = createRef();\n    return _this;\n  }\n  DayTable.prototype.render = function () {\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    return createElement(Table, __assign({\n      ref: this.tableRef\n    }, this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel), {\n      dateProfile: props.dateProfile,\n      cells: props.dayTableModel.cells,\n      colGroupNode: props.colGroupNode,\n      tableMinWidth: props.tableMinWidth,\n      renderRowIntro: props.renderRowIntro,\n      dayMaxEvents: props.dayMaxEvents,\n      dayMaxEventRows: props.dayMaxEventRows,\n      showWeekNumbers: props.showWeekNumbers,\n      expandRows: props.expandRows,\n      headerAlignElRef: props.headerAlignElRef,\n      clientWidth: props.clientWidth,\n      clientHeight: props.clientHeight,\n      forPrint: props.forPrint\n    }));\n  };\n  return DayTable;\n}(DateComponent);\nvar DayTableView = /** @class */function (_super) {\n  __extends(DayTableView, _super);\n  function DayTableView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.buildDayTableModel = memoize(buildDayTableModel);\n    _this.headerRef = createRef();\n    _this.tableRef = createRef();\n    return _this;\n  }\n  DayTableView.prototype.render = function () {\n    var _this = this;\n    var _a = this.context,\n      options = _a.options,\n      dateProfileGenerator = _a.dateProfileGenerator;\n    var props = this.props;\n    var dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator);\n    var headerContent = options.dayHeaders && createElement(DayHeader, {\n      ref: this.headerRef,\n      dateProfile: props.dateProfile,\n      dates: dayTableModel.headerDates,\n      datesRepDistinctDays: dayTableModel.rowCnt === 1\n    });\n    var bodyContent = function (contentArg) {\n      return createElement(DayTable, {\n        ref: _this.tableRef,\n        dateProfile: props.dateProfile,\n        dayTableModel: dayTableModel,\n        businessHours: props.businessHours,\n        dateSelection: props.dateSelection,\n        eventStore: props.eventStore,\n        eventUiBases: props.eventUiBases,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        nextDayThreshold: options.nextDayThreshold,\n        colGroupNode: contentArg.tableColGroupNode,\n        tableMinWidth: contentArg.tableMinWidth,\n        dayMaxEvents: options.dayMaxEvents,\n        dayMaxEventRows: options.dayMaxEventRows,\n        showWeekNumbers: options.weekNumbers,\n        expandRows: !props.isHeightAuto,\n        headerAlignElRef: _this.headerElRef,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        forPrint: props.forPrint\n      });\n    };\n    return options.dayMinWidth ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth) : this.renderSimpleLayout(headerContent, bodyContent);\n  };\n  return DayTableView;\n}(TableView);\nfunction buildDayTableModel(dateProfile, dateProfileGenerator) {\n  var daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n  return new DayTableModel(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));\n}\nvar TableDateProfileGenerator = /** @class */function (_super) {\n  __extends(TableDateProfileGenerator, _super);\n  function TableDateProfileGenerator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  // Computes the date range that will be rendered.\n  TableDateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {\n    var dateEnv = this.props.dateEnv;\n    var renderRange = _super.prototype.buildRenderRange.call(this, currentRange, currentRangeUnit, isRangeAllDay);\n    var start = renderRange.start;\n    var end = renderRange.end;\n    var endOfWeek;\n    // year and month views should be aligned with weeks. this is already done for week\n    if (/^(year|month)$/.test(currentRangeUnit)) {\n      start = dateEnv.startOfWeek(start);\n      // make end-of-week if not already\n      endOfWeek = dateEnv.startOfWeek(end);\n      if (endOfWeek.valueOf() !== end.valueOf()) {\n        end = addWeeks(endOfWeek, 1);\n      }\n    }\n    // ensure 6 weeks\n    if (this.props.monthMode && this.props.fixedWeekCount) {\n      var rowCnt = Math.ceil(\n      // could be partial weeks due to hiddenDays\n      diffWeeks(start, end));\n      end = addWeeks(end, 6 - rowCnt);\n    }\n    return {\n      start: start,\n      end: end\n    };\n  };\n  return TableDateProfileGenerator;\n}(DateProfileGenerator);\nvar main = createPlugin({\n  initialView: 'dayGridMonth',\n  views: {\n    dayGrid: {\n      component: DayTableView,\n      dateProfileGeneratorClass: TableDateProfileGenerator\n    },\n    dayGridDay: {\n      type: 'dayGrid',\n      duration: {\n        days: 1\n      }\n    },\n    dayGridWeek: {\n      type: 'dayGrid',\n      duration: {\n        weeks: 1\n      }\n    },\n    dayGridMonth: {\n      type: 'dayGrid',\n      duration: {\n        months: 1\n      },\n      monthMode: true,\n      fixedWeekCount: true\n    }\n  }\n});\nexport default main;\nexport { DayTableView as DayGridView, DayTable, DayTableSlicer, Table, TableView, buildDayTableModel };","map":{"version":3,"names":["__extends","TableView","_super","_this","apply","arguments","headerElRef","createRef","prototype","renderSimpleLayout","headerRowContent","bodyContent","_a","props","context","sections","stickyHeaderDates","getStickyHeaderDates","options","push","type","key","isSticky","chunk","elRef","tableClassName","rowContent","liquid","content","createElement","ViewRoot","viewSpec","rootElRef","classNames","ref","className","concat","join","SimpleScrollGrid","isHeightAuto","forPrint","collapsibleWidth","cols","renderHScrollLayout","colCnt","dayMinWidth","ScrollGrid","pluginHooks","scrollGridImpl","Error","stickyFooterScrollbar","getStickyFooterScrollbar","chunks","renderScrollShim","colGroups","span","minWidth","DateComponent","splitSegsByRow","segs","rowCnt","byRow","i","_i","segs_1","length","seg","row","splitSegsByFirstCol","byCol","segs_2","firstCol","splitInteractionByRow","ui","affectedInstances","isEvent","TableCellTop","render","navLinkAttrs","buildNavLinkAttrs","date","DayCellContent","dateProfile","todayRange","showDayNumber","extraHookProps","defaultContent","renderTopInner","innerElRef","innerContent","forceDayTop","__assign","id","dayNumberId","Fragment","BaseComponent","dayNumberText","DEFAULT_TABLE_EVENT_TIME_FORMAT","createFormatter","hour","minute","omitZeroMinute","meridiem","hasListItemDisplay","display","eventRange","def","allDay","lastCol","isStart","isEnd","TableBlockEvent","StandardEvent","extraClassNames","defaultTimeFormat","defaultDisplayEventEnd","disableResizing","TableListItemEvent","timeFormat","eventTimeFormat","timeText","buildSegTimeText","EventRoot","renderInnerContent","isDragging","isResizing","isDateSelecting","isSelected","isPast","isFuture","isToday","getSegAnchorAttrs","innerProps","style","borderColor","backgroundColor","event","title","TableCellMoreLink","compileSegs","memoize","singlePlacements","allSegs","invisibleSegs","MoreLinkRoot","allDayDate","moreCnt","hiddenSegs","alignmentElRef","alignGridTop","extraDateSpan","popoverContent","isForcedInvisible","eventDrag","eventResize","map","instanceId","instance","visibility","eventSelection","getSegMeta","handleClick","isExpanded","popoverId","createAriaClickAttrs","singlePlacements_1","placement","isVisible","DEFAULT_WEEK_NUM_FORMAT","week","TableCell","state","getUniqueDomId","handleRootEl","el","setRef","DayCellRoot","dayElRef","dayClassNames","rootDataAttrs","isDisabled","role","extraDataAttrs","showWeekNumber","WeekNumberRoot","defaultFormat","weekElRef","weekClassNames","fgContentElRef","fgContent","marginTop","moreMarginTop","bgContent","computeFgSegPlacement","dayMaxEvents","dayMaxEventRows","strictOrder","eventInstanceHeights","maxContentHeight","cells","hierarchy","DayGridSegHierarchy","allowReslicing","maxCoord","hiddenConsumes","maxStackCnt","segInputs","unknownHeightSegs","eventHeight","index","thickness","start","end","hiddenEntries","addSegs","segRects","toRects","placeRects","singleColPlacements","multiColPlacements","leftoverMargins","moreCnts","moreMarginTops","unknownHeightSegs_1","isAbsolute","absoluteTop","col","resliceSeg","_b","hiddenEntries_1","hiddenEntry","hiddenSpan","allRects","rectsByEachCol","groupRectsByEachCol","rects","currentHeight","currentMarginTop","rects_1","rect","levelCoord","multiPlacements","rects_2","isFirstCol","rects_3","spanStart","spanEnd","origRange","range","slicedRange","intersectRanges","addDays","durationEditable","valueOf","forceHidden","call","entriesByLevel","excludeHidden","entry","buildEntryKey","level","filter","handleInvalidInsertion","insertion","touchingEntry","touchingLevel","touchingLateral","touchingEntryId","placeholderEntry","intersectSpans","placeholderEntryId","splitEntry","SegHierarchy","TableRow","cellElRefs","RefMap","frameElRefs","fgElRefs","segHarnessRefs","framePositions","businessHoursByCol","businessHourSegs","bgEventSegsByCol","bgEventSegs","highlightSegsByCol","getHighlightSegs","mirrorSegsByCol","getMirrorSegs","sortEventSegs","fgEventSegs","eventOrder","eventOrderStrict","renderIntro","cell","normalFgNodes","renderFgSegs","mirrorFgNodes","buildMirrorPlacements","Boolean","showDayNumbers","showWeekNumbers","renderFillSegs","componentDidMount","updateSizing","componentDidUpdate","prevProps","prevState","currentProps","isPropsEqual","dateSelectionSegs","segPlacements","isMirror","nodes","segPlacements_1","left","right","isRtl","lefts","rights","top","fillType","leftRightCss","buildEventRangeKey","BgEvent","renderFill","__spreadArray","isExternalSizingChange","clientWidth","frameEls","currentMap","originEl","current","setState","PositionCache","oldInstanceHeights","newInstanceHeights","queryEventInstanceHeights","limitByContentHeight","safeSetState","computeMaxContentHeight","segElMap","height","Math","round","getBoundingClientRect","split","max","firstKey","cellEl","fcContainerEl","bottom","getCellEls","elMap","addStateEquality","mirrorSegs","colPlacements","topsByInstanceId","buildAbsoluteTopHash","colPlacements_1","placements","placements_1","Table","splitBusinessHourSegs","splitBgEventSegs","splitFgEventSegs","splitDateSelectionSegs","splitEventDrag","splitEventResize","rowRefs","rootEl","registerInteractiveComponent","isHitComboAllowed","unregisterInteractiveComponent","expandRows","businessHourSegsByRow","bgEventSegsByRow","fgEventSegsByRow","dateSelectionSegsByRow","eventDragByRow","eventResizeByRow","limitViaBalanced","width","tableMinWidth","NowTimer","unit","nowDate","clientHeight","colGroupNode","toISOString","renderRowIntro","isSegAllDay","prepareHits","rowPositions","collect","rowObj","colPositions","queryHit","positionLeft","positionTop","leftToIndex","topToIndex","dateSpan","getCellRange","dayEl","getCellEl","tops","bottoms","layer","DayTableSlicer","forceDayIfListItem","sliceRange","dateRange","dayTableModel","Slicer","DayTable","slicer","tableRef","sliceProps","nextDayThreshold","headerAlignElRef","DayTableView","buildDayTableModel","headerRef","dateProfileGenerator","headerContent","dayHeaders","DayHeader","dates","headerDates","datesRepDistinctDays","contentArg","businessHours","dateSelection","eventStore","eventUiBases","tableColGroupNode","weekNumbers","daySeries","DaySeriesModel","renderRange","DayTableModel","test","currentRangeUnit","TableDateProfileGenerator","buildRenderRange","currentRange","isRangeAllDay","dateEnv","endOfWeek","startOfWeek","addWeeks","monthMode","fixedWeekCount","ceil","diffWeeks","DateProfileGenerator","main","createPlugin","initialView","views","dayGrid","component","dateProfileGeneratorClass","dayGridDay","duration","days","dayGridWeek","weeks","dayGridMonth","months"],"sources":["C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\TableView.tsx","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\TableSeg.ts","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\TableCellTop.tsx","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\event-rendering.ts","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\TableBlockEvent.tsx","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\TableListItemEvent.tsx","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\TableCellMoreLink.tsx","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\TableCell.tsx","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\event-placement.ts","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\TableRow.tsx","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\Table.tsx","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\DayTableSlicer.tsx","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\DayTable.tsx","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\DayTableView.tsx","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\TableDateProfileGenerator.ts","C:\\Users\\MO ZAID\\OneDrive\\Desktop\\Assignment\\Calender\\client\\node_modules\\@fullcalendar\\daygrid\\src\\main.ts"],"sourcesContent":["import {\n  VNode, createElement,\n  SimpleScrollGrid,\n  SimpleScrollGridSection,\n  ChunkContentCallbackArgs,\n  createRef,\n  ScrollGridSectionConfig,\n  ViewRoot,\n  DateComponent,\n  ViewProps,\n  RefObject,\n  renderScrollShim,\n  getStickyHeaderDates,\n  getStickyFooterScrollbar,\n  ChunkConfigRowContent,\n  Dictionary,\n} from '@fullcalendar/common'\n\n/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a Table subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\n\nexport abstract class TableView<State=Dictionary> extends DateComponent<ViewProps, State> {\n  protected headerElRef: RefObject<HTMLTableCellElement> = createRef<HTMLTableCellElement>()\n\n  renderSimpleLayout(\n    headerRowContent: ChunkConfigRowContent,\n    bodyContent: (contentArg: ChunkContentCallbackArgs) => VNode,\n  ) {\n    let { props, context } = this\n    let sections: SimpleScrollGridSection[] = []\n    let stickyHeaderDates = getStickyHeaderDates(context.options)\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        },\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunk: { content: bodyContent },\n    })\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={['fc-daygrid'].concat(classNames).join(' ')}>\n            <SimpleScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={props.forPrint}\n              cols={[] /* TODO: make optional? */}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  renderHScrollLayout(\n    headerRowContent: ChunkConfigRowContent,\n    bodyContent: (contentArg: ChunkContentCallbackArgs) => VNode,\n    colCnt: number,\n    dayMinWidth: number,\n  ) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation')\n    }\n\n    let { props, context } = this\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options)\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options)\n    let sections: ScrollGridSectionConfig[] = []\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunks: [{\n          key: 'main',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        }],\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunks: [{\n        key: 'main',\n        content: bodyContent,\n      }],\n    })\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        type: 'footer',\n        key: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'main',\n          content: renderScrollShim,\n        }],\n      })\n    }\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={['fc-daygrid'].concat(classNames).join(' ')}>\n            <ScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={props.forPrint}\n              colGroups={[{ cols: [{ span: colCnt, minWidth: dayMinWidth }] }]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n}\n","import { EventSegUiInteractionState, Seg } from '@fullcalendar/common'\n\n// this is a DATA STRUCTURE, not a component\n\nexport interface TableSeg extends Seg {\n  row: number\n  firstCol: number\n  lastCol: number\n}\n\nexport function splitSegsByRow(segs: TableSeg[], rowCnt: number) {\n  let byRow: TableSeg[][] = []\n\n  for (let i = 0; i < rowCnt; i += 1) {\n    byRow[i] = []\n  }\n\n  for (let seg of segs) {\n    byRow[seg.row].push(seg)\n  }\n\n  return byRow\n}\n\nexport function splitSegsByFirstCol(segs: TableSeg[], colCnt: number) {\n  let byCol: TableSeg[][] = []\n\n  for (let i = 0; i < colCnt; i += 1) {\n    byCol[i] = []\n  }\n\n  for (let seg of segs) {\n    byCol[seg.firstCol].push(seg)\n  }\n\n  return byCol\n}\n\nexport function splitInteractionByRow(ui: EventSegUiInteractionState | null, rowCnt: number) {\n  let byRow: EventSegUiInteractionState[] = []\n\n  if (!ui) {\n    for (let i = 0; i < rowCnt; i += 1) {\n      byRow[i] = null\n    }\n  } else {\n    for (let i = 0; i < rowCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: [],\n      }\n    }\n\n    for (let seg of ui.segs) {\n      byRow[seg.row].segs.push(seg)\n    }\n  }\n\n  return byRow\n}\n","import {\n  createElement,\n  DateMarker,\n  DateRange,\n  DayCellContentArg,\n  DayCellContent,\n  BaseComponent,\n  DateProfile,\n  Dictionary,\n  Fragment,\n  buildNavLinkAttrs,\n} from '@fullcalendar/common'\n\ninterface TableCellTopProps {\n  date: DateMarker\n  dateProfile: DateProfile\n  showDayNumber: boolean\n  dayNumberId: string\n  forceDayTop: boolean // hack to force-create an element with height (created by a nbsp)\n  todayRange: DateRange\n  extraHookProps?: Dictionary\n}\n\nexport class TableCellTop extends BaseComponent<TableCellTopProps> {\n  render() {\n    let { props } = this\n    let navLinkAttrs = buildNavLinkAttrs(this.context, props.date)\n\n    return (\n      <DayCellContent\n        date={props.date}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        showDayNumber={props.showDayNumber}\n        extraHookProps={props.extraHookProps}\n        defaultContent={renderTopInner}\n      >\n        {(innerElRef, innerContent) => (\n          (innerContent || props.forceDayTop) && (\n            <div className=\"fc-daygrid-day-top\" ref={innerElRef}>\n              <a\n                id={props.dayNumberId}\n                className=\"fc-daygrid-day-number\"\n                {...navLinkAttrs}\n              >\n                {innerContent || <Fragment>&nbsp;</Fragment>}\n              </a>\n            </div>\n          )\n        )}\n      </DayCellContent>\n    )\n  }\n}\n\nfunction renderTopInner(props: DayCellContentArg) {\n  return props.dayNumberText\n}\n","import { createFormatter } from '@fullcalendar/common'\nimport { TableSeg } from './TableSeg'\n\nexport const DEFAULT_TABLE_EVENT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'narrow',\n})\n\nexport function hasListItemDisplay(seg: TableSeg) {\n  let { display } = seg.eventRange.ui\n\n  return display === 'list-item' || (\n    display === 'auto' &&\n    !seg.eventRange.def.allDay &&\n    seg.firstCol === seg.lastCol && // can't be multi-day\n    seg.isStart && // \"\n    seg.isEnd // \"\n  )\n}\n","import { createElement, StandardEvent, BaseComponent, MinimalEventProps } from '@fullcalendar/common'\nimport { DEFAULT_TABLE_EVENT_TIME_FORMAT } from './event-rendering'\n\nexport interface TableBlockEventProps extends MinimalEventProps {\n  defaultDisplayEventEnd: boolean\n}\n\nexport class TableBlockEvent extends BaseComponent<TableBlockEventProps> {\n  render() {\n    let { props } = this\n\n    return (\n      <StandardEvent\n        {...props}\n        extraClassNames={['fc-daygrid-event', 'fc-daygrid-block-event', 'fc-h-event']}\n        defaultTimeFormat={DEFAULT_TABLE_EVENT_TIME_FORMAT}\n        defaultDisplayEventEnd={props.defaultDisplayEventEnd}\n        disableResizing={!props.seg.eventRange.def.allDay}\n      />\n    )\n  }\n}\n","import {\n  createElement,\n  BaseComponent,\n  Seg,\n  EventRoot,\n  buildSegTimeText,\n  EventContentArg,\n  Fragment,\n  getSegAnchorAttrs,\n} from '@fullcalendar/common'\nimport { DEFAULT_TABLE_EVENT_TIME_FORMAT } from './event-rendering'\n\nexport interface DotTableEventProps {\n  seg: Seg\n  isDragging: boolean\n  isSelected: boolean\n  isPast: boolean\n  isFuture: boolean\n  isToday: boolean\n  defaultDisplayEventEnd: boolean\n}\n\nexport class TableListItemEvent extends BaseComponent<DotTableEventProps> {\n  render() {\n    let { props, context } = this\n    let timeFormat = context.options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT\n    let timeText = buildSegTimeText(\n      props.seg,\n      timeFormat,\n      context,\n      true,\n      props.defaultDisplayEventEnd,\n    )\n\n    return (\n      <EventRoot\n        seg={props.seg}\n        timeText={timeText}\n        defaultContent={renderInnerContent}\n        isDragging={props.isDragging}\n        isResizing={false}\n        isDateSelecting={false}\n        isSelected={props.isSelected}\n        isPast={props.isPast}\n        isFuture={props.isFuture}\n        isToday={props.isToday}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => ( // we don't use styles!\n          <a\n            className={['fc-daygrid-event', 'fc-daygrid-dot-event'].concat(classNames).join(' ')}\n            ref={rootElRef}\n            {...getSegAnchorAttrs(props.seg, context)}\n          >\n            {innerContent}\n          </a>\n        )}\n      </EventRoot>\n    )\n  }\n}\n\nfunction renderInnerContent(innerProps: EventContentArg) {\n  return (\n    <Fragment>\n      <div\n        className=\"fc-daygrid-event-dot\"\n        style={{ borderColor: innerProps.borderColor || innerProps.backgroundColor }}\n      />\n      {innerProps.timeText && (\n        <div className=\"fc-event-time\">{innerProps.timeText}</div>\n      )}\n      <div className=\"fc-event-title\">\n        {innerProps.event.title || <Fragment>&nbsp;</Fragment>}\n      </div>\n    </Fragment>\n  )\n}\n","import {\n  createElement,\n  MoreLinkRoot,\n  RefObject,\n  BaseComponent,\n  memoize,\n  DateMarker,\n  Dictionary,\n  DateProfile,\n  DateRange,\n  EventSegUiInteractionState,\n  getSegMeta,\n  Fragment,\n  createAriaClickAttrs,\n} from '@fullcalendar/common'\nimport { TableSegPlacement } from './event-placement'\nimport { hasListItemDisplay } from './event-rendering'\nimport { TableBlockEvent } from './TableBlockEvent'\nimport { TableListItemEvent } from './TableListItemEvent'\nimport { TableSeg } from './TableSeg'\n\nexport interface TableCellMoreLinkProps {\n  allDayDate: DateMarker\n  singlePlacements: TableSegPlacement[]\n  moreCnt: number\n  alignmentElRef: RefObject<HTMLElement> // for popover\n  alignGridTop: boolean // for popover\n  extraDateSpan?: Dictionary\n  dateProfile: DateProfile\n  todayRange: DateRange\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n}\n\nexport class TableCellMoreLink extends BaseComponent<TableCellMoreLinkProps> {\n  compileSegs = memoize(compileSegs)\n\n  render() {\n    let { props } = this\n    let { allSegs, invisibleSegs } = this.compileSegs(props.singlePlacements)\n\n    return (\n      <MoreLinkRoot\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        allDayDate={props.allDayDate}\n        moreCnt={props.moreCnt}\n        allSegs={allSegs}\n        hiddenSegs={invisibleSegs}\n        alignmentElRef={props.alignmentElRef}\n        alignGridTop={props.alignGridTop}\n        extraDateSpan={props.extraDateSpan}\n        popoverContent={() => {\n          let isForcedInvisible =\n            (props.eventDrag ? props.eventDrag.affectedInstances : null) ||\n            (props.eventResize ? props.eventResize.affectedInstances : null) ||\n            {}\n          return (\n            <Fragment>\n              {allSegs.map((seg) => {\n                let instanceId = seg.eventRange.instance.instanceId\n                return (\n                  <div\n                    className=\"fc-daygrid-event-harness\"\n                    key={instanceId}\n                    style={{\n                      visibility: isForcedInvisible[instanceId] ? 'hidden' : ('' as any),\n                    }}\n                  >\n                    {hasListItemDisplay(seg) ? (\n                      <TableListItemEvent\n                        seg={seg}\n                        isDragging={false}\n                        isSelected={instanceId === props.eventSelection}\n                        defaultDisplayEventEnd={false}\n                        {...getSegMeta(seg, props.todayRange)}\n                      />\n                    ) : (\n                      <TableBlockEvent\n                        seg={seg}\n                        isDragging={false}\n                        isResizing={false}\n                        isDateSelecting={false}\n                        isSelected={instanceId === props.eventSelection}\n                        defaultDisplayEventEnd={false}\n                        {...getSegMeta(seg, props.todayRange)}\n                      />\n                    )}\n                  </div>\n                )\n              })}\n            </Fragment>\n          )\n        }}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) => (\n          <a\n            ref={rootElRef}\n            className={['fc-daygrid-more-link'].concat(classNames).join(' ')}\n            title={title}\n            aria-expanded={isExpanded}\n            aria-controls={popoverId}\n            {...createAriaClickAttrs(handleClick)}\n          >\n            {innerContent}\n          </a>\n        )}\n      </MoreLinkRoot>\n    )\n  }\n}\n\nfunction compileSegs(singlePlacements: TableSegPlacement[]): {\n  allSegs: TableSeg[]\n  invisibleSegs: TableSeg[]\n} {\n  let allSegs: TableSeg[] = []\n  let invisibleSegs: TableSeg[] = []\n\n  for (let placement of singlePlacements) {\n    allSegs.push(placement.seg)\n\n    if (!placement.isVisible) {\n      invisibleSegs.push(placement.seg)\n    }\n  }\n\n  return { allSegs, invisibleSegs }\n}\n","import {\n  Ref,\n  ComponentChildren,\n  createElement,\n  DateMarker,\n  DateComponent,\n  DateRange,\n  buildNavLinkAttrs,\n  WeekNumberRoot,\n  DayCellRoot,\n  DateProfile,\n  setRef,\n  createFormatter,\n  Dictionary,\n  createRef,\n  EventSegUiInteractionState,\n  getUniqueDomId,\n} from '@fullcalendar/common'\nimport { TableCellTop } from './TableCellTop'\nimport { TableCellMoreLink } from './TableCellMoreLink'\nimport { TableSegPlacement } from './event-placement'\n\nexport interface TableCellProps {\n  date: DateMarker\n  dateProfile: DateProfile\n  extraHookProps?: Dictionary\n  extraDataAttrs?: Dictionary\n  extraClassNames?: string[]\n  extraDateSpan?: Dictionary\n  elRef?: Ref<HTMLTableCellElement>\n  innerElRef?: Ref<HTMLDivElement>\n  bgContent: ComponentChildren\n  fgContentElRef?: Ref<HTMLDivElement> // TODO: rename!!! classname confusion. is the \"event\" div\n  fgContent: ComponentChildren\n  moreCnt: number\n  moreMarginTop: number\n  showDayNumber: boolean\n  showWeekNumber: boolean\n  forceDayTop: boolean\n  todayRange: DateRange\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  singlePlacements: TableSegPlacement[]\n}\n\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({ week: 'narrow' })\n\nexport class TableCell extends DateComponent<TableCellProps> {\n  private rootElRef = createRef<HTMLElement>()\n  state = {\n    dayNumberId: getUniqueDomId(),\n  }\n\n  render() {\n    let { context, props, state, rootElRef } = this\n    let { date, dateProfile } = props\n    let navLinkAttrs = buildNavLinkAttrs(context, date, 'week')\n\n    return (\n      <DayCellRoot\n        date={date}\n        dateProfile={dateProfile}\n        todayRange={props.todayRange}\n        showDayNumber={props.showDayNumber}\n        extraHookProps={props.extraHookProps}\n        elRef={this.handleRootEl}\n      >\n        {(dayElRef, dayClassNames, rootDataAttrs, isDisabled) => (\n          <td\n            ref={dayElRef}\n            role=\"gridcell\"\n            className={['fc-daygrid-day'].concat(dayClassNames, props.extraClassNames || []).join(' ')}\n            {...rootDataAttrs}\n            {...props.extraDataAttrs}\n            {...(props.showDayNumber ? { 'aria-labelledby': state.dayNumberId } : {})}\n          >\n            <div className=\"fc-daygrid-day-frame fc-scrollgrid-sync-inner\" ref={props.innerElRef /* different from hook system! RENAME */}>\n              {props.showWeekNumber && (\n                <WeekNumberRoot date={date} defaultFormat={DEFAULT_WEEK_NUM_FORMAT}>\n                  {(weekElRef, weekClassNames, innerElRef, innerContent) => (\n                    <a\n                      ref={weekElRef}\n                      className={['fc-daygrid-week-number'].concat(weekClassNames).join(' ')}\n                      {...navLinkAttrs}\n                    >\n                      {innerContent}\n                    </a>\n                  )}\n                </WeekNumberRoot>\n              )}\n              {!isDisabled && (\n                <TableCellTop\n                  date={date}\n                  dateProfile={dateProfile}\n                  showDayNumber={props.showDayNumber}\n                  dayNumberId={state.dayNumberId}\n                  forceDayTop={props.forceDayTop}\n                  todayRange={props.todayRange}\n                  extraHookProps={props.extraHookProps}\n                />\n              )}\n              <div\n                className=\"fc-daygrid-day-events\"\n                ref={props.fgContentElRef}\n              >\n                {props.fgContent}\n                <div className=\"fc-daygrid-day-bottom\" style={{ marginTop: props.moreMarginTop }}>\n                  <TableCellMoreLink\n                    allDayDate={date}\n                    singlePlacements={props.singlePlacements}\n                    moreCnt={props.moreCnt}\n                    alignmentElRef={rootElRef}\n                    alignGridTop={!props.showDayNumber}\n                    extraDateSpan={props.extraDateSpan}\n                    dateProfile={props.dateProfile}\n                    eventSelection={props.eventSelection}\n                    eventDrag={props.eventDrag}\n                    eventResize={props.eventResize}\n                    todayRange={props.todayRange}\n                  />\n                </div>\n              </div>\n              <div className=\"fc-daygrid-day-bg\">\n                {props.bgContent}\n              </div>\n            </div>\n          </td>\n        )}\n      </DayCellRoot>\n    )\n  }\n\n  handleRootEl = (el: HTMLElement) => {\n    setRef(this.rootElRef, el)\n    setRef(this.props.elRef, el)\n  }\n}\n","import {\n  SegHierarchy,\n  SegRect,\n  SegEntry,\n  SegInsertion,\n  buildEntryKey,\n  EventRenderRange,\n  intersectRanges,\n  addDays,\n  DayTableCell,\n  intersectSpans,\n} from '@fullcalendar/common'\nimport { TableSeg } from './TableSeg'\n\nexport interface TableSegPlacement {\n  seg: TableSeg\n  isVisible: boolean\n  isAbsolute: boolean\n  absoluteTop: number // populated regardless of isAbsolute\n  marginTop: number\n}\n\nexport function computeFgSegPlacement(\n  segs: TableSeg[], // assumed already sorted\n  dayMaxEvents: boolean | number,\n  dayMaxEventRows: boolean | number,\n  strictOrder: boolean,\n  eventInstanceHeights: { [instanceId: string]: number },\n  maxContentHeight: number | null,\n  cells: DayTableCell[],\n) {\n  let hierarchy = new DayGridSegHierarchy()\n  hierarchy.allowReslicing = true\n  hierarchy.strictOrder = strictOrder\n\n  if (dayMaxEvents === true || dayMaxEventRows === true) {\n    hierarchy.maxCoord = maxContentHeight\n    hierarchy.hiddenConsumes = true\n  } else if (typeof dayMaxEvents === 'number') {\n    hierarchy.maxStackCnt = dayMaxEvents\n  } else if (typeof dayMaxEventRows === 'number') {\n    hierarchy.maxStackCnt = dayMaxEventRows\n    hierarchy.hiddenConsumes = true\n  }\n\n  // create segInputs only for segs with known heights\n  let segInputs: SegEntry[] = []\n  let unknownHeightSegs: TableSeg[] = []\n  for (let i = 0; i < segs.length; i += 1) {\n    let seg = segs[i]\n    let { instanceId } = seg.eventRange.instance\n    let eventHeight = eventInstanceHeights[instanceId]\n\n    if (eventHeight != null) {\n      segInputs.push({\n        index: i,\n        thickness: eventHeight,\n        span: {\n          start: seg.firstCol,\n          end: seg.lastCol + 1,\n        },\n      })\n    } else {\n      unknownHeightSegs.push(seg)\n    }\n  }\n\n  let hiddenEntries = hierarchy.addSegs(segInputs)\n  let segRects = hierarchy.toRects()\n  let { singleColPlacements, multiColPlacements, leftoverMargins } = placeRects(segRects, segs, cells)\n\n  let moreCnts: number[] = []\n  let moreMarginTops: number[] = []\n\n  // add segs with unknown heights\n  for (let seg of unknownHeightSegs) {\n    multiColPlacements[seg.firstCol].push({\n      seg,\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0,\n    })\n\n    for (let col = seg.firstCol; col <= seg.lastCol; col += 1) {\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0,\n      })\n    }\n  }\n\n  // add the hidden entries\n  for (let col = 0; col < cells.length; col += 1) {\n    moreCnts.push(0)\n  }\n  for (let hiddenEntry of hiddenEntries) {\n    let seg = segs[hiddenEntry.index]\n    let hiddenSpan = hiddenEntry.span\n\n    multiColPlacements[hiddenSpan.start].push({\n      seg: resliceSeg(seg, hiddenSpan.start, hiddenSpan.end, cells),\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0,\n    })\n\n    for (let col = hiddenSpan.start; col < hiddenSpan.end; col += 1) {\n      moreCnts[col] += 1\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0,\n      })\n    }\n  }\n\n  // deal with leftover margins\n  for (let col = 0; col < cells.length; col += 1) {\n    moreMarginTops.push(leftoverMargins[col])\n  }\n\n  return { singleColPlacements, multiColPlacements, moreCnts, moreMarginTops }\n}\n\n// rects ordered by top coord, then left\nfunction placeRects(allRects: SegRect[], segs: TableSeg[], cells: DayTableCell[]) {\n  let rectsByEachCol = groupRectsByEachCol(allRects, cells.length)\n  let singleColPlacements: TableSegPlacement[][] = []\n  let multiColPlacements: TableSegPlacement[][] = []\n  let leftoverMargins: number[] = []\n\n  for (let col = 0; col < cells.length; col += 1) {\n    let rects = rectsByEachCol[col]\n\n    // compute all static segs in singlePlacements\n    let singlePlacements: TableSegPlacement[] = []\n    let currentHeight = 0\n    let currentMarginTop = 0\n    for (let rect of rects) {\n      let seg = segs[rect.index]\n      singlePlacements.push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: true,\n        isAbsolute: false,\n        absoluteTop: rect.levelCoord,\n        marginTop: rect.levelCoord - currentHeight,\n      })\n      currentHeight = rect.levelCoord + rect.thickness\n    }\n\n    // compute mixed static/absolute segs in multiPlacements\n    let multiPlacements: TableSegPlacement[] = []\n    currentHeight = 0\n    currentMarginTop = 0\n    for (let rect of rects) {\n      let seg = segs[rect.index]\n      let isAbsolute = rect.span.end - rect.span.start > 1 // multi-column?\n      let isFirstCol = rect.span.start === col\n\n      currentMarginTop += rect.levelCoord - currentHeight // amount of space since bottom of previous seg\n      currentHeight = rect.levelCoord + rect.thickness // height will now be bottom of current seg\n\n      if (isAbsolute) {\n        currentMarginTop += rect.thickness\n        if (isFirstCol) {\n          multiPlacements.push({\n            seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n            isVisible: true,\n            isAbsolute: true,\n            absoluteTop: rect.levelCoord,\n            marginTop: 0,\n          })\n        }\n      } else if (isFirstCol) {\n        multiPlacements.push({\n          seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n          isVisible: true,\n          isAbsolute: false,\n          absoluteTop: rect.levelCoord,\n          marginTop: currentMarginTop, // claim the margin\n        })\n        currentMarginTop = 0\n      }\n    }\n\n    singleColPlacements.push(singlePlacements)\n    multiColPlacements.push(multiPlacements)\n    leftoverMargins.push(currentMarginTop)\n  }\n\n  return { singleColPlacements, multiColPlacements, leftoverMargins }\n}\n\nfunction groupRectsByEachCol(rects: SegRect[], colCnt: number): SegRect[][] {\n  let rectsByEachCol: SegRect[][] = []\n\n  for (let col = 0; col < colCnt; col += 1) {\n    rectsByEachCol.push([])\n  }\n\n  for (let rect of rects) {\n    for (let col = rect.span.start; col < rect.span.end; col += 1) {\n      rectsByEachCol[col].push(rect)\n    }\n  }\n\n  return rectsByEachCol\n}\n\nfunction resliceSeg(seg: TableSeg, spanStart: number, spanEnd: number, cells: DayTableCell[]): TableSeg {\n  if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) {\n    return seg\n  }\n\n  let eventRange = seg.eventRange\n  let origRange = eventRange.range\n  let slicedRange = intersectRanges(origRange, {\n    start: cells[spanStart].date,\n    end: addDays(cells[spanEnd - 1].date, 1),\n  })\n\n  return {\n    ...seg,\n    firstCol: spanStart,\n    lastCol: spanEnd - 1,\n    eventRange: {\n      def: eventRange.def,\n      ui: { ...eventRange.ui, durationEditable: false }, // hack to disable resizing\n      instance: eventRange.instance,\n      range: slicedRange,\n    } as EventRenderRange,\n    isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),\n    isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf(),\n  }\n}\n\nclass DayGridSegHierarchy extends SegHierarchy {\n  // config\n  hiddenConsumes: boolean = false\n\n  // allows us to keep hidden entries in the hierarchy so they take up space\n  forceHidden: { [entryId: string]: true } = {}\n\n  addSegs(segInputs: SegEntry[]): SegEntry[] {\n    const hiddenSegs = super.addSegs(segInputs)\n    const { entriesByLevel } = this\n    const excludeHidden = (entry: SegEntry) => !this.forceHidden[buildEntryKey(entry)]\n\n    // remove the forced-hidden segs\n    for (let level = 0; level < entriesByLevel.length; level += 1) {\n      entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden)\n    }\n\n    return hiddenSegs\n  }\n\n  handleInvalidInsertion(insertion: SegInsertion, entry: SegEntry, hiddenEntries: SegEntry[]) {\n    const { entriesByLevel, forceHidden } = this\n    const { touchingEntry, touchingLevel, touchingLateral } = insertion\n\n    if (this.hiddenConsumes && touchingEntry) {\n      const touchingEntryId = buildEntryKey(touchingEntry)\n      // if not already hidden\n      if (!forceHidden[touchingEntryId]) {\n        if (this.allowReslicing) {\n          const placeholderEntry: SegEntry = { // placeholder of the \"more\" link\n            ...touchingEntry,\n            span: intersectSpans(touchingEntry.span, entry.span),\n          }\n          const placeholderEntryId = buildEntryKey(placeholderEntry)\n          forceHidden[placeholderEntryId] = true\n          entriesByLevel[touchingLevel][touchingLateral] = placeholderEntry // replace touchingEntry with our placeholder\n          this.splitEntry(touchingEntry, entry, hiddenEntries) // split up the touchingEntry, reinsert it\n        } else {\n          forceHidden[touchingEntryId] = true\n          hiddenEntries.push(touchingEntry)\n        }\n      }\n    }\n\n    return super.handleInvalidInsertion(insertion, entry, hiddenEntries)\n  }\n}\n","import {\n  EventSegUiInteractionState,\n  VNode,\n  DateComponent,\n  createElement,\n  PositionCache,\n  RefMap,\n  CssDimValue,\n  DateRange,\n  getSegMeta,\n  DateProfile,\n  Fragment,\n  BgEvent,\n  renderFill,\n  isPropsEqual,\n  createRef,\n  buildEventRangeKey,\n  sortEventSegs,\n  DayTableCell,\n} from '@fullcalendar/common'\nimport { TableSeg, splitSegsByFirstCol } from './TableSeg'\nimport { TableCell } from './TableCell'\nimport { TableListItemEvent } from './TableListItemEvent'\nimport { TableBlockEvent } from './TableBlockEvent'\nimport { computeFgSegPlacement, TableSegPlacement } from './event-placement'\nimport { hasListItemDisplay } from './event-rendering'\n\n// TODO: attach to window resize?\n\nexport interface TableRowProps {\n  cells: DayTableCell[]\n  renderIntro?: () => VNode\n  businessHourSegs: TableSeg[]\n  bgEventSegs: TableSeg[]\n  fgEventSegs: TableSeg[]\n  dateSelectionSegs: TableSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  clientWidth: number | null\n  clientHeight: number | null // simply for causing an updateSize, for when liquid height\n  dateProfile: DateProfile\n  todayRange: DateRange\n  showDayNumbers: boolean\n  showWeekNumbers: boolean\n  forPrint: boolean\n}\n\ninterface TableRowState {\n  framePositions: PositionCache\n  maxContentHeight: number | null\n  eventInstanceHeights: { [instanceId: string]: number } // integers\n}\n\nexport class TableRow extends DateComponent<TableRowProps, TableRowState> {\n  private cellElRefs = new RefMap<HTMLTableCellElement>() // the <td>\n  private frameElRefs = new RefMap<HTMLElement>() // the fc-daygrid-day-frame\n  private fgElRefs = new RefMap<HTMLDivElement>() // the fc-daygrid-day-events\n  private segHarnessRefs = new RefMap<HTMLDivElement>() // indexed by \"instanceId:firstCol\"\n  private rootElRef = createRef<HTMLTableRowElement>()\n\n  state: TableRowState = {\n    framePositions: null,\n    maxContentHeight: null,\n    eventInstanceHeights: {},\n  }\n\n  render() {\n    let { props, state, context } = this\n    let { options } = context\n    let colCnt = props.cells.length\n\n    let businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt)\n    let bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt)\n    let highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt)\n    let mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt)\n\n    let { singleColPlacements, multiColPlacements, moreCnts, moreMarginTops } = computeFgSegPlacement(\n      sortEventSegs(props.fgEventSegs, options.eventOrder) as TableSeg[],\n      props.dayMaxEvents,\n      props.dayMaxEventRows,\n      options.eventOrderStrict,\n      state.eventInstanceHeights,\n      state.maxContentHeight,\n      props.cells,\n    )\n\n    let isForcedInvisible = // TODO: messy way to compute this\n      (props.eventDrag && props.eventDrag.affectedInstances) ||\n      (props.eventResize && props.eventResize.affectedInstances) ||\n      {}\n\n    return (\n      <tr ref={this.rootElRef} role=\"row\">\n        {props.renderIntro && props.renderIntro()}\n        {props.cells.map((cell, col) => {\n          let normalFgNodes = this.renderFgSegs(\n            col,\n            props.forPrint ? singleColPlacements[col] : multiColPlacements[col],\n            props.todayRange,\n            isForcedInvisible,\n          )\n\n          let mirrorFgNodes = this.renderFgSegs(\n            col,\n            buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements),\n            props.todayRange,\n            {},\n            Boolean(props.eventDrag),\n            Boolean(props.eventResize),\n            false, // date-selecting (because mirror is never drawn for date selection)\n          )\n\n          return (\n            <TableCell\n              key={cell.key}\n              elRef={this.cellElRefs.createRef(cell.key)}\n              innerElRef={this.frameElRefs.createRef(cell.key) /* FF <td> problem, but okay to use for left/right. TODO: rename prop */}\n              dateProfile={props.dateProfile}\n              date={cell.date}\n              showDayNumber={props.showDayNumbers}\n              showWeekNumber={props.showWeekNumbers && col === 0}\n              forceDayTop={props.showWeekNumbers /* even displaying weeknum for row, not necessarily day */}\n              todayRange={props.todayRange}\n              eventSelection={props.eventSelection}\n              eventDrag={props.eventDrag}\n              eventResize={props.eventResize}\n              extraHookProps={cell.extraHookProps}\n              extraDataAttrs={cell.extraDataAttrs}\n              extraClassNames={cell.extraClassNames}\n              extraDateSpan={cell.extraDateSpan}\n              moreCnt={moreCnts[col]}\n              moreMarginTop={moreMarginTops[col]}\n              singlePlacements={singleColPlacements[col]}\n              fgContentElRef={this.fgElRefs.createRef(cell.key)}\n              fgContent={( // Fragment scopes the keys\n                <Fragment>\n                  <Fragment>{normalFgNodes}</Fragment>\n                  <Fragment>{mirrorFgNodes}</Fragment>\n                </Fragment>\n              )}\n              bgContent={( // Fragment scopes the keys\n                <Fragment>\n                  {this.renderFillSegs(highlightSegsByCol[col], 'highlight')}\n                  {this.renderFillSegs(businessHoursByCol[col], 'non-business')}\n                  {this.renderFillSegs(bgEventSegsByCol[col], 'bg-event')}\n                </Fragment>\n              )}\n            />\n          )\n        })}\n      </tr>\n    )\n  }\n\n  componentDidMount() {\n    this.updateSizing(true)\n  }\n\n  componentDidUpdate(prevProps: TableRowProps, prevState: TableRowState) {\n    let currentProps = this.props\n\n    this.updateSizing(\n      !isPropsEqual(prevProps, currentProps),\n    )\n  }\n\n  getHighlightSegs(): TableSeg[] {\n    let { props } = this\n\n    if (props.eventDrag && props.eventDrag.segs.length) { // messy check\n      return props.eventDrag.segs as TableSeg[]\n    }\n\n    if (props.eventResize && props.eventResize.segs.length) { // messy check\n      return props.eventResize.segs as TableSeg[]\n    }\n\n    return props.dateSelectionSegs\n  }\n\n  getMirrorSegs(): TableSeg[] {\n    let { props } = this\n\n    if (props.eventResize && props.eventResize.segs.length) { // messy check\n      return props.eventResize.segs as TableSeg[]\n    }\n\n    return []\n  }\n\n  renderFgSegs(\n    col: number,\n    segPlacements: TableSegPlacement[],\n    todayRange: DateRange,\n    isForcedInvisible: { [instanceId: string]: any },\n    isDragging?: boolean,\n    isResizing?: boolean,\n    isDateSelecting?: boolean,\n  ): VNode[] {\n    let { context } = this\n    let { eventSelection } = this.props\n    let { framePositions } = this.state\n    let defaultDisplayEventEnd = this.props.cells.length === 1 // colCnt === 1\n    let isMirror = isDragging || isResizing || isDateSelecting\n    let nodes: VNode[] = []\n\n    if (framePositions) {\n      for (let placement of segPlacements) {\n        let { seg } = placement\n        let { instanceId } = seg.eventRange.instance\n        let key = instanceId + ':' + col\n        let isVisible = placement.isVisible && !isForcedInvisible[instanceId]\n        let isAbsolute = placement.isAbsolute\n        let left: CssDimValue = ''\n        let right: CssDimValue = ''\n\n        if (isAbsolute) {\n          if (context.isRtl) {\n            right = 0\n            left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]\n          } else {\n            left = 0\n            right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]\n          }\n        }\n\n        /*\n        known bug: events that are force to be list-item but span multiple days still take up space in later columns\n        todo: in print view, for multi-day events, don't display title within non-start/end segs\n        */\n        nodes.push(\n          <div\n            className={'fc-daygrid-event-harness' + (isAbsolute ? ' fc-daygrid-event-harness-abs' : '')}\n            key={key}\n            ref={isMirror ? null : this.segHarnessRefs.createRef(key)}\n            style={{\n              visibility: isVisible ? ('' as any) : 'hidden',\n              marginTop: isAbsolute ? '' : placement.marginTop,\n              top: isAbsolute ? placement.absoluteTop : '',\n              left,\n              right,\n            }}\n          >\n            {hasListItemDisplay(seg) ? (\n              <TableListItemEvent\n                seg={seg}\n                isDragging={isDragging}\n                isSelected={instanceId === eventSelection}\n                defaultDisplayEventEnd={defaultDisplayEventEnd}\n                {...getSegMeta(seg, todayRange)}\n              />\n            ) : (\n              <TableBlockEvent\n                seg={seg}\n                isDragging={isDragging}\n                isResizing={isResizing}\n                isDateSelecting={isDateSelecting}\n                isSelected={instanceId === eventSelection}\n                defaultDisplayEventEnd={defaultDisplayEventEnd}\n                {...getSegMeta(seg, todayRange)}\n              />\n            )}\n          </div>,\n        )\n      }\n    }\n\n    return nodes\n  }\n\n  renderFillSegs(segs: TableSeg[], fillType: string): VNode {\n    let { isRtl } = this.context\n    let { todayRange } = this.props\n    let { framePositions } = this.state\n    let nodes: VNode[] = []\n\n    if (framePositions) {\n      for (let seg of segs) {\n        let leftRightCss = isRtl ? {\n          right: 0,\n          left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol],\n        } : {\n          left: 0,\n          right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol],\n        }\n\n        nodes.push(\n          <div\n            key={buildEventRangeKey(seg.eventRange)}\n            className=\"fc-daygrid-bg-harness\"\n            style={leftRightCss}\n          >\n            {fillType === 'bg-event' ?\n              <BgEvent seg={seg} {...getSegMeta(seg, todayRange)} /> :\n              renderFill(fillType)}\n          </div>,\n        )\n      }\n    }\n\n    return createElement(Fragment, {}, ...nodes)\n  }\n\n  updateSizing(isExternalSizingChange) {\n    let { props, frameElRefs } = this\n\n    if (\n      !props.forPrint &&\n      props.clientWidth !== null // positioning ready?\n    ) {\n      if (isExternalSizingChange) {\n        let frameEls = props.cells.map((cell) => frameElRefs.currentMap[cell.key])\n\n        if (frameEls.length) {\n          let originEl = this.rootElRef.current\n\n          this.setState({ // will trigger isCellPositionsChanged...\n            framePositions: new PositionCache(\n              originEl,\n              frameEls,\n              true, // isHorizontal\n              false,\n            ),\n          })\n        }\n      }\n\n      const oldInstanceHeights = this.state.eventInstanceHeights\n      const newInstanceHeights = this.queryEventInstanceHeights()\n      const limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true\n\n      this.safeSetState({\n        // HACK to prevent oscillations of events being shown/hidden from max-event-rows\n        // Essentially, once you compute an element's height, never null-out.\n        // TODO: always display all events, as visibility:hidden?\n        eventInstanceHeights: { ...oldInstanceHeights, ...newInstanceHeights },\n\n        maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null,\n      })\n    }\n  }\n\n  queryEventInstanceHeights() {\n    let segElMap = this.segHarnessRefs.currentMap\n    let eventInstanceHeights: { [key: string]: number } = {}\n\n    // get the max height amongst instance segs\n    for (let key in segElMap) {\n      let height = Math.round(segElMap[key].getBoundingClientRect().height)\n      let instanceId = key.split(':')[0] // deconstruct how renderFgSegs makes the key\n      eventInstanceHeights[instanceId] = Math.max(eventInstanceHeights[instanceId] || 0, height)\n    }\n\n    return eventInstanceHeights\n  }\n\n  computeMaxContentHeight() {\n    let firstKey = this.props.cells[0].key\n    let cellEl = this.cellElRefs.currentMap[firstKey]\n    let fcContainerEl = this.fgElRefs.currentMap[firstKey]\n\n    return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top\n  }\n\n  public getCellEls() {\n    let elMap = this.cellElRefs.currentMap\n\n    return this.props.cells.map((cell) => elMap[cell.key])\n  }\n}\n\nTableRow.addStateEquality({\n  eventInstanceHeights: isPropsEqual,\n})\n\nfunction buildMirrorPlacements(mirrorSegs: TableSeg[], colPlacements: TableSegPlacement[][]): TableSegPlacement[] {\n  if (!mirrorSegs.length) {\n    return []\n  }\n  let topsByInstanceId = buildAbsoluteTopHash(colPlacements) // TODO: cache this at first render?\n  return mirrorSegs.map((seg: TableSeg) => ({\n    seg,\n    isVisible: true,\n    isAbsolute: true,\n    absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],\n    marginTop: 0,\n  }))\n}\n\nfunction buildAbsoluteTopHash(colPlacements: TableSegPlacement[][]): { [instanceId: string]: number } {\n  let topsByInstanceId: { [instanceId: string]: number } = {}\n\n  for (let placements of colPlacements) {\n    for (let placement of placements) {\n      topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop\n    }\n  }\n\n  return topsByInstanceId\n}\n","import {\n  EventSegUiInteractionState,\n  VNode,\n  DateComponent,\n  RefObject,\n  CssDimValue,\n  createElement,\n  PositionCache,\n  memoize,\n  addDays,\n  RefMap,\n  DateRange,\n  NowTimer,\n  DateMarker,\n  DateProfile,\n  Fragment,\n  Hit,\n  DayTableCell,\n} from '@fullcalendar/common'\nimport { TableSeg, splitSegsByRow, splitInteractionByRow } from './TableSeg'\nimport { TableRow } from './TableRow'\n\nexport interface TableProps {\n  dateProfile: DateProfile\n  cells: DayTableCell[][] // cells-BY-ROW\n  renderRowIntro?: () => VNode\n  colGroupNode: VNode\n  tableMinWidth: CssDimValue\n  expandRows: boolean\n  showWeekNumbers: boolean\n  clientWidth: number | null\n  clientHeight: number | null\n  businessHourSegs: TableSeg[]\n  bgEventSegs: TableSeg[]\n  fgEventSegs: TableSeg[]\n  dateSelectionSegs: TableSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  headerAlignElRef?: RefObject<HTMLElement>\n  forPrint: boolean\n  isHitComboAllowed?: (hit0: Hit, hit1: Hit) => boolean\n}\n\nexport class Table extends DateComponent<TableProps> {\n  private splitBusinessHourSegs = memoize(splitSegsByRow)\n  private splitBgEventSegs = memoize(splitSegsByRow)\n  private splitFgEventSegs = memoize(splitSegsByRow)\n  private splitDateSelectionSegs = memoize(splitSegsByRow)\n  private splitEventDrag = memoize(splitInteractionByRow)\n  private splitEventResize = memoize(splitInteractionByRow)\n  private rootEl: HTMLElement\n  private rowRefs = new RefMap<TableRow>()\n  private rowPositions: PositionCache\n  private colPositions: PositionCache\n\n  render() {\n    let { props } = this\n    let { dateProfile, dayMaxEventRows, dayMaxEvents, expandRows } = props\n    let rowCnt = props.cells.length\n\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt)\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt)\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt)\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt)\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt)\n    let eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt)\n\n    let limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true\n\n    // if rows can't expand to fill fixed height, can't do balanced-height event limit\n    // TODO: best place to normalize these options?\n    if (limitViaBalanced && !expandRows) {\n      limitViaBalanced = false\n      dayMaxEventRows = null\n      dayMaxEvents = null\n    }\n\n    let classNames = [\n      'fc-daygrid-body',\n      limitViaBalanced ? 'fc-daygrid-body-balanced' : 'fc-daygrid-body-unbalanced', // will all row heights be equal?\n      expandRows ? '' : 'fc-daygrid-body-natural', // will height of one row depend on the others?\n    ]\n\n    return (\n      <div\n        className={classNames.join(' ')}\n        ref={this.handleRootEl}\n        style={{\n          // these props are important to give this wrapper correct dimensions for interactions\n          // TODO: if we set it here, can we avoid giving to inner tables?\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n        }}\n      >\n        <NowTimer unit=\"day\">\n          {(nowDate: DateMarker, todayRange: DateRange) => (\n            <Fragment>\n              <table\n                role=\"presentation\"\n                className=\"fc-scrollgrid-sync-table\"\n                style={{\n                  width: props.clientWidth,\n                  minWidth: props.tableMinWidth,\n                  height: expandRows ? props.clientHeight : '',\n                }}\n              >\n                {props.colGroupNode}\n                <tbody role=\"presentation\">\n                  {props.cells.map((cells, row) => (\n                    <TableRow\n                      ref={this.rowRefs.createRef(row)}\n                      key={\n                        cells.length\n                          ? cells[0].date.toISOString() /* best? or put key on cell? or use diff formatter? */\n                          : row // in case there are no cells (like when resource view is loading)\n                      }\n                      showDayNumbers={rowCnt > 1}\n                      showWeekNumbers={props.showWeekNumbers}\n                      todayRange={todayRange}\n                      dateProfile={dateProfile}\n                      cells={cells}\n                      renderIntro={props.renderRowIntro}\n                      businessHourSegs={businessHourSegsByRow[row]}\n                      eventSelection={props.eventSelection}\n                      bgEventSegs={bgEventSegsByRow[row].filter(isSegAllDay) /* hack */}\n                      fgEventSegs={fgEventSegsByRow[row]}\n                      dateSelectionSegs={dateSelectionSegsByRow[row]}\n                      eventDrag={eventDragByRow[row]}\n                      eventResize={eventResizeByRow[row]}\n                      dayMaxEvents={dayMaxEvents}\n                      dayMaxEventRows={dayMaxEventRows}\n                      clientWidth={props.clientWidth}\n                      clientHeight={props.clientHeight}\n                      forPrint={props.forPrint}\n                    />\n                  ))}\n                </tbody>\n              </table>\n            </Fragment>\n          )}\n        </NowTimer>\n      </div>\n    )\n  }\n\n  handleRootEl = (rootEl: HTMLElement | null) => {\n    this.rootEl = rootEl\n\n    if (rootEl) {\n      this.context.registerInteractiveComponent(this, {\n        el: rootEl,\n        isHitComboAllowed: this.props.isHitComboAllowed,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  // Hit System\n  // ----------------------------------------------------------------------------------------------------\n\n  prepareHits() {\n    this.rowPositions = new PositionCache(\n      this.rootEl,\n      this.rowRefs.collect().map((rowObj) => rowObj.getCellEls()[0]), // first cell el in each row. TODO: not optimal\n      false,\n      true, // vertical\n    )\n\n    this.colPositions = new PositionCache(\n      this.rootEl,\n      this.rowRefs.currentMap[0].getCellEls(), // cell els in first row\n      true, // horizontal\n      false,\n    )\n  }\n\n  queryHit(positionLeft: number, positionTop: number): Hit {\n    let { colPositions, rowPositions } = this\n    let col = colPositions.leftToIndex(positionLeft)\n    let row = rowPositions.topToIndex(positionTop)\n\n    if (row != null && col != null) {\n      let cell = this.props.cells[row][col]\n\n      return {\n        dateProfile: this.props.dateProfile,\n        dateSpan: {\n          range: this.getCellRange(row, col),\n          allDay: true,\n          ...cell.extraDateSpan,\n        },\n        dayEl: this.getCellEl(row, col),\n        rect: {\n          left: colPositions.lefts[col],\n          right: colPositions.rights[col],\n          top: rowPositions.tops[row],\n          bottom: rowPositions.bottoms[row],\n        },\n        layer: 0,\n      }\n    }\n\n    return null\n  }\n\n  private getCellEl(row, col) {\n    return this.rowRefs.currentMap[row].getCellEls()[col] // TODO: not optimal\n  }\n\n  private getCellRange(row, col) {\n    let start = this.props.cells[row][col].date\n    let end = addDays(start, 1)\n    return { start, end }\n  }\n}\n\nfunction isSegAllDay(seg: TableSeg) {\n  return seg.eventRange.def.allDay\n}\n","import { DayTableModel, DateRange, Slicer } from '@fullcalendar/common'\nimport { TableSeg } from './TableSeg'\n\nexport class DayTableSlicer extends Slicer<TableSeg, [DayTableModel]> {\n  forceDayIfListItem = true\n\n  sliceRange(dateRange: DateRange, dayTableModel: DayTableModel): TableSeg[] {\n    return dayTableModel.sliceRange(dateRange)\n  }\n}\n","import {\n  createElement, createRef, VNode,\n  EventStore,\n  EventUiHash,\n  DateSpan,\n  EventInteractionState,\n  DayTableModel,\n  Duration,\n  DateComponent,\n  ViewContext,\n  RefObject,\n  CssDimValue,\n  DateProfile,\n} from '@fullcalendar/common'\nimport { Table } from './Table'\nimport { DayTableSlicer } from './DayTableSlicer'\n\nexport interface DayTableProps {\n  dateProfile: DateProfile,\n  dayTableModel: DayTableModel\n  nextDayThreshold: Duration\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  colGroupNode: VNode\n  tableMinWidth: CssDimValue\n  renderRowIntro?: () => VNode\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  expandRows: boolean\n  showWeekNumbers: boolean\n  headerAlignElRef?: RefObject<HTMLElement> // for more popover alignment\n  clientWidth: number | null\n  clientHeight: number | null\n  forPrint: boolean\n}\n\nexport class DayTable extends DateComponent<DayTableProps, ViewContext> {\n  private slicer = new DayTableSlicer()\n  private tableRef = createRef<Table>()\n\n  render() {\n    let { props, context } = this\n\n    return (\n      <Table\n        ref={this.tableRef}\n        {...this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel)}\n        dateProfile={props.dateProfile}\n        cells={props.dayTableModel.cells}\n        colGroupNode={props.colGroupNode}\n        tableMinWidth={props.tableMinWidth}\n        renderRowIntro={props.renderRowIntro}\n        dayMaxEvents={props.dayMaxEvents}\n        dayMaxEventRows={props.dayMaxEventRows}\n        showWeekNumbers={props.showWeekNumbers}\n        expandRows={props.expandRows}\n        headerAlignElRef={props.headerAlignElRef}\n        clientWidth={props.clientWidth}\n        clientHeight={props.clientHeight}\n        forPrint={props.forPrint}\n      />\n    )\n  }\n}\n","import {\n  createElement, createRef,\n  DayHeader,\n  DateProfileGenerator,\n  DateProfile,\n  memoize,\n  DaySeriesModel,\n  DayTableModel,\n  ChunkContentCallbackArgs,\n} from '@fullcalendar/common'\nimport { TableView } from './TableView'\nimport { DayTable } from './DayTable'\n\nexport class DayTableView extends TableView {\n  private buildDayTableModel = memoize(buildDayTableModel)\n  private headerRef = createRef<DayHeader>()\n  private tableRef = createRef<DayTable>()\n\n  render() {\n    let { options, dateProfileGenerator } = this.context\n    let { props } = this\n    let dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator)\n\n    let headerContent = options.dayHeaders && (\n      <DayHeader\n        ref={this.headerRef}\n        dateProfile={props.dateProfile}\n        dates={dayTableModel.headerDates}\n        datesRepDistinctDays={dayTableModel.rowCnt === 1}\n      />\n    )\n\n    let bodyContent = (contentArg: ChunkContentCallbackArgs) => (\n      <DayTable\n        ref={this.tableRef}\n        dateProfile={props.dateProfile}\n        dayTableModel={dayTableModel}\n        businessHours={props.businessHours}\n        dateSelection={props.dateSelection}\n        eventStore={props.eventStore}\n        eventUiBases={props.eventUiBases}\n        eventSelection={props.eventSelection}\n        eventDrag={props.eventDrag}\n        eventResize={props.eventResize}\n        nextDayThreshold={options.nextDayThreshold}\n        colGroupNode={contentArg.tableColGroupNode}\n        tableMinWidth={contentArg.tableMinWidth}\n        dayMaxEvents={options.dayMaxEvents}\n        dayMaxEventRows={options.dayMaxEventRows}\n        showWeekNumbers={options.weekNumbers}\n        expandRows={!props.isHeightAuto}\n        headerAlignElRef={this.headerElRef}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        forPrint={props.forPrint}\n      />\n    )\n\n    return options.dayMinWidth\n      ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth)\n      : this.renderSimpleLayout(headerContent, bodyContent)\n  }\n}\n\nexport function buildDayTableModel(dateProfile: DateProfile, dateProfileGenerator: DateProfileGenerator) {\n  let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator)\n\n  return new DayTableModel(\n    daySeries,\n    /year|month|week/.test(dateProfile.currentRangeUnit),\n  )\n}\n","import {\n  DateProfileGenerator,\n  addWeeks, diffWeeks,\n  DateRange,\n} from '@fullcalendar/common'\n\nexport class TableDateProfileGenerator extends DateProfileGenerator {\n  // Computes the date range that will be rendered.\n  buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay): DateRange {\n    let { dateEnv } = this.props\n    let renderRange = super.buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay)\n    let start = renderRange.start\n    let end = renderRange.end\n    let endOfWeek\n\n    // year and month views should be aligned with weeks. this is already done for week\n    if (/^(year|month)$/.test(currentRangeUnit)) {\n      start = dateEnv.startOfWeek(start)\n\n      // make end-of-week if not already\n      endOfWeek = dateEnv.startOfWeek(end)\n      if (endOfWeek.valueOf() !== end.valueOf()) {\n        end = addWeeks(endOfWeek, 1)\n      }\n    }\n\n    // ensure 6 weeks\n    if (\n      this.props.monthMode &&\n      this.props.fixedWeekCount\n    ) {\n      let rowCnt = Math.ceil( // could be partial weeks due to hiddenDays\n        diffWeeks(start, end),\n      )\n      end = addWeeks(end, 6 - rowCnt)\n    }\n\n    return { start, end }\n  }\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { DayTableView } from './DayTableView'\nimport { TableDateProfileGenerator } from './TableDateProfileGenerator'\nimport './main.css'\n\nexport { DayTable } from './DayTable'\nexport { DayTableSlicer } from './DayTableSlicer'\nexport { Table } from './Table'\nexport { TableSeg } from './TableSeg'\nexport { TableView } from './TableView'\nexport { buildDayTableModel } from './DayTableView'\nexport { DayTableView as DayGridView } // export as old name!\n\nexport default createPlugin({\n  initialView: 'dayGridMonth',\n  views: {\n\n    dayGrid: {\n      component: DayTableView,\n      dateProfileGeneratorClass: TableDateProfileGenerator,\n    },\n\n    dayGridDay: {\n      type: 'dayGrid',\n      duration: { days: 1 },\n    },\n\n    dayGridWeek: {\n      type: 'dayGrid',\n      duration: { weeks: 1 },\n    },\n\n    dayGridMonth: {\n      type: 'dayGrid',\n      duration: { months: 1 },\n      monthMode: true,\n      fixedWeekCount: true,\n    },\n\n  },\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}